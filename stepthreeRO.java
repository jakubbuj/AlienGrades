import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class stepthreeRO {
    //The arrayslists listed below are used in step 3 as position indexes
    private ArrayList<Integer> FullList = new ArrayList<>();
    private ArrayList<Integer> HighList = new ArrayList<>();
    private ArrayList<Integer> MediumList = new ArrayList<>();
    private ArrayList<Integer> LowList = new ArrayList<>();
    private ArrayList<Integer> NothingList = new ArrayList<>();
    //hurni
    private ArrayList<Integer> NulpList = new ArrayList<>();
    private ArrayList<Integer> DootList = new ArrayList<>();
    private ArrayList<Integer> LobiList = new ArrayList<>();
    //suruna
    private ArrayList<Integer> Lal1List = new ArrayList<>(); // 100 - 90
    private ArrayList<Integer> Lal2List = new ArrayList<>(); // 89 - 80
    private ArrayList<Integer> Lal3List = new ArrayList<>(); // 79 - 70
    private ArrayList<Integer> Lal4List = new ArrayList<>(); // 69 -59
    //lal count
    private ArrayList<Integer> Stars5List = new ArrayList<>();
    private ArrayList<Integer> Stars4List = new ArrayList<>();
    private ArrayList<Integer> Stars3List = new ArrayList<>();
    private ArrayList<Integer> Stars2List = new ArrayList<>();
    private ArrayList<Integer> Stars1List = new ArrayList<>();
    

    public static void main(String[] args) {

        //arrays 
        //double[][] graduate_grades = File_To_Array("GraduateGrades.csv");
        //double[][] current_grades = File_To_Array("CurrentGrades.csv");


       //use if you have werid bug wiht 0.0's in graduate grades. the error is located in File_To_Array - hasNextDouble
       String [] [] StudentInfo = {
               {"1000243", "nulp", "high", "69", "4 stars"},
               {"1000574", "nulp", "low", "61", "3 stars"},
               {"1000071", "doot", "full", "100", "3 stars"},
               {"1001845", "lobi", "low", "99", "5 stars"},
               {"1002347", "lobi", "nothing", "82", "1 stars"},
               {"1000446", "doot", "medium", "66", "5 stars"},
               {"1001492", "lobi", "low", "63", "1 stars"},
               {"1001781", "nulp", "nothing", "80", "5 stars"},
               {"1001075", "lobi", "medium", "99", "5 stars"},
               {"1002430", "nulp", "high", "61", "5 stars"},
               {"1002590", "lobi", "nothing", "81", "1 stars"},
               {"1002395", "lobi", "nothing", "81", "1 stars"},
               {"1000582", "lobi", "full", "88", "1 stars"},
               {"1001459", "lobi", "full", "79", "2 stars"},
               {"1002664", "nulp", "high", "98", "2 stars"},
               {"1000680", "lobi", "medium", "80", "4 stars"},
               {"1000264", "nulp", "medium", "72", "5 stars"},
               {"1002500", "nulp", "nothing", "60", "2 stars"},
               {"1001600", "lobi", "high", "61", "5 stars"},
               {"1001204", "doot", "medium", "86", "2 stars"},
               {"1000405", "nulp", "nothing", "61", "4 stars"},
               {"1002183", "doot", "medium", "91", "2 stars"},
               {"1001500", "nulp", "full", "63", "4 stars"},
               {"1001940", "nulp", "high", "62", "2 stars"},
               {"1001357", "nulp", "high", "71", "1 stars"},
               {"1000784", "nulp", "medium", "64", "2 stars"},
               {"1000952", "lobi", "medium", "93", "3 stars"},
               {"1002451", "doot", "full", "86", "3 stars"},
               {"1001549", "nulp", "full", "68", "4 stars"},
               {"1002480", "nulp", "high", "100", "2 stars"},
               {"1000307", "lobi", "low", "70", "3 stars"},
               {"1002260", "lobi", "nothing", "90", "1 stars"},
               {"1001933", "nulp", "nothing", "73", "5 stars"},
               {"1002300", "doot", "low", "62", "5 stars"},
               {"1000744", "nulp", "full", "93", "2 stars"},
               {"1001200", "nulp", "nothing", "82", "4 stars"},
               {"1002313", "doot", "medium", "77", "2 stars"},
               {"1002226", "nulp", "high", "87", "3 stars"},
               {"1002692", "lobi", "nothing", "71", "2 stars"},
               {"1000772", "doot", "full", "77", "5 stars"},
               {"1002105", "lobi", "medium", "75", "5 stars"},
               {"1002080", "lobi", "medium", "66", "1 stars"},
               {"1002151", "nulp", "full", "84", "2 stars"},
               {"1002485", "lobi", "nothing", "99", "1 stars"},
               {"1001052", "doot", "full", "82", "1 stars"},
               {"1000889", "lobi", "high", "71", "4 stars"},
               {"1002827", "nulp", "medium", "59", "2 stars"},
               {"1000196", "nulp", "medium", "61", "3 stars"},
               {"1002460", "doot", "medium", "59", "1 stars"},
               {"1002167", "doot", "medium", "63", "5 stars"},
               {"1002445", "lobi", "full", "80", "2 stars"},
               {"1002530", "nulp", "low", "63", "4 stars"},
               {"1001523", "doot", "medium", "71", "4 stars"},
               {"1002602", "nulp", "medium", "89", "4 stars"},
               {"1001973", "lobi", "nothing", "73", "4 stars"},
               {"1000689", "nulp", "low", "69", "5 stars"},
               {"1002799", "doot", "medium", "79", "4 stars"},
               {"1000432", "lobi", "medium", "98", "2 stars"},
               {"1002187", "lobi", "nothing", "89", "3 stars"},
               {"1000561", "lobi", "medium", "76", "2 stars"},
               {"1000994", "lobi", "low", "61", "2 stars"},
               {"1001122", "lobi", "nothing", "91", "5 stars"},
               {"1001795", "nulp", "high", "77", "2 stars"},
               {"1001079", "nulp", "low", "98", "1 stars"},
               {"1001005", "lobi", "full", "82", "2 stars"},
               {"1002476", "doot", "high", "78", "3 stars"},
               {"1000501", "lobi", "high", "79", "3 stars"},
               {"1001527", "doot", "low", "71", "4 stars"},
               {"1002398", "nulp", "low", "96", "2 stars"},
               {"1001477", "lobi", "low", "87", "5 stars"},
               {"1002517", "doot", "low", "83", "4 stars"},
               {"1002640", "lobi", "high", "89", "2 stars"},
               {"1000044", "nulp", "nothing", "78", "4 stars"},
               {"1001251", "doot", "medium", "75", "1 stars"},
               {"1002164", "lobi", "medium", "77", "5 stars"},
               {"1001925", "doot", "nothing", "97", "4 stars"},
               {"1001421", "lobi", "full", "71", "5 stars"},
               {"1000311", "nulp", "high", "61", "3 stars"},
               {"1000720", "nulp", "full", "68", "5 stars"},
               {"1001619", "lobi", "low", "77", "5 stars"},
               {"1002571", "doot", "nothing", "93", "1 stars"},
               {"1000823", "nulp", "low", "65", "4 stars"},
               {"1000721", "lobi", "high", "71", "4 stars"},
               {"1001641", "nulp", "high", "78", "1 stars"},
               {"1002481", "lobi", "medium", "90", "1 stars"},
               {"1000717", "lobi", "medium", "68", "2 stars"},
               {"1002317", "nulp", "full", "96", "3 stars"},
               {"1001911", "lobi", "full", "73", "1 stars"},
               {"1002415", "doot", "low", "72", "2 stars"},
               {"1001613", "nulp", "medium", "91", "4 stars"},
               {"1001144", "lobi", "medium", "63", "5 stars"},
               {"1000320", "lobi", "high", "96", "4 stars"},
               {"1000938", "nulp", "full", "98", "1 stars"},
               {"1000390", "lobi", "full", "78", "1 stars"},
               {"1002241", "nulp", "medium", "97", "4 stars"},
               {"1002734", "nulp", "medium", "83", "4 stars"},
               {"1002047", "lobi", "medium", "81", "2 stars"}
       };
        double[][] graduate_grades={
            {8.0, 8.0, 7.0, 8.0, 6.0, 7.0, 9.0, 7.0, 8.0, 6.0, 6.0, 9.0, 10.0, 8.0, 6.0, 10.0, 7.0, 9.0, 10.0, 8.0, 6.0, 8.0, 6.0, 6.0, 6.0, 9.0, 6.0, 6.0, 6.0, 8.0},
            {10.0, 10.0, 10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,}, //cum laudge
            {8.0, 7.0, 9.0, 8.0, 7.0, 9.0, 9.0, 6.0, 7.0, 8.0, 6.0, 7.0, 7.0, 8.0, 6.0, 6.0, 9.0, 6.0, 9.0, 8.0, 10.0, 7.0, 10.0, 10.0, 8.0, 7.0, 9.0, 9.0, 7.0, 7.0},
            {8.0, 10.0, 8.0, 8.0, 7.0, 8.0, 6.0, 7.0, 8.0, 9.0, 7.0, 6.0, 7.0, 8.0, 8.0, 9.0, 9.0, 6.0, 7.0, 7.0, 6.0, 10.0, 7.0, 8.0, 6.0, 6.0, 7.0, 9.0, 6.0, 6.0},
            {6.0, 7.0, 6.0, 6.0, 6.0, 8.0, 10.0, 8.0, 10.0, 9.0, 7.0, 7.0, 7.0, 6.0, 8.0, 8.0, 6.0, 6.0, 6.0, 7.0, 9.0, 8.0, 8.0, 9.0, 8.0, 8.0, 10.0, 6.0, 6.0, 6.0},
            {9.0, 10.0, 6.0, 7.0, 7.0, 6.0, 9.0, 6.0, 8.0, 8.0, 7.0, 7.0, 6.0, 6.0, 9.0, 6.0, 8.0, 6.0, 8.0, 9.0, 8.0, 9.0, 8.0, 7.0, 6.0, 6.0, 8.0, 6.0, 7.0, 8.0},
            {7.0, 8.0, 10.0, 6.0, 7.0, 7.0, 6.0, 6.0, 8.0, 7.0, 6.0, 6.0, 8.0, 7.0, 6.0, 8.0, 8.0, 6.0, 9.0, 6.0, 8.0, 8.0, 7.0, 9.0, 9.0, 8.0, 10.0, 6.0, 7.0, 8.0},
            {8.0, 8.0, 7.0, 7.0, 7.0, 6.0, 8.0, 6.0, 10.0, 9.0, 6.0, 8.0, 7.0, 7.0, 9.0, 6.0, 8.0, 6.0, 6.0, 7.0, 8.0, 10.0, 7.0, 8.0, 7.0, 6.0, 9.0, 6.0, 9.0, 6.0},
            {7.0, 9.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 6.0, 8.0, 8.0, 8.0, 6.0, 7.0, 7.0, 7.0, 8.0, 6.0, 7.0, 9.0, 7.0, 6.0, 8.0, 7.0, 10.0, 7.0, 7.0, 6.0},
            {8.0, 8.0, 8.0, 7.0, 8.0, 7.0, 8.0, 6.0, 7.0, 10.0, 6.0, 7.0, 7.0, 7.0, 9.0, 9.0, 7.0, 6.0, 8.0, 6.0, 10.0, 8.0, 6.0, 6.0, 6.0, 6.0, 10.0, 8.0, 6.0, 6.0},
            {9.0, 8.0, 6.0, 8.0, 6.0, 6.0, 10.0, 7.0, 8.0, 8.0, 7.0, 8.0, 8.0, 9.0, 7.0, 9.0, 9.0, 6.0, 8.0, 6.0, 7.0, 7.0, 6.0, 9.0, 7.0, 6.0, 6.0, 6.0, 9.0, 7.0},
            {8.0, 9.0, 9.0, 7.0, 6.0, 6.0, 8.0, 9.0, 7.0, 7.0, 6.0, 8.0, 10.0, 8.0, 7.0, 10.0, 8.0, 6.0, 6.0, 7.0, 7.0, 9.0, 7.0, 8.0, 7.0, 7.0, 6.0, 6.0, 8.0, 6.0},
            {10.0, 9.0, 7.0, 7.0, 7.0, 6.0, 9.0, 7.0, 8.0, 10.0, 6.0, 6.0, 7.0, 8.0, 9.0, 7.0, 8.0, 6.0, 6.0, 6.0, 9.0, 7.0, 7.0, 7.0, 8.0, 8.0, 9.0, 9.0, 6.0, 6.0},
            {6.0, 7.0, 8.0, 6.0, 6.0, 7.0, 8.0, 6.0, 9.0, 10.0, 6.0, 6.0, 7.0, 6.0, 9.0, 7.0, 6.0, 6.0, 7.0, 8.0, 9.0, 6.0, 7.0, 10.0, 8.0, 8.0, 8.0, 6.0, 6.0, 6.0},
            {7.0, 7.0, 6.0, 7.0, 8.0, 8.0, 6.0, 6.0, 10.0, 8.0, 7.0, 7.0, 7.0, 6.0, 7.0, 9.0, 6.0, 6.0, 8.0, 6.0, 6.0, 10.0, 9.0, 7.0, 6.0, 6.0, 7.0, 7.0, 7.0, 8.0},
            {6.0, 8.0, 6.0, 7.0, 9.0, 7.0, 6.0, 8.0, 7.0, 7.0, 7.0, 6.0, 8.0, 9.0, 6.0, 6.0, 7.0, 6.0, 9.0, 7.0, 10.0, 9.0, 10.0, 9.0, 8.0, 6.0, 9.0, 10.0, 8.0, 6.0},
            {6.0, 9.0, 7.0, 7.0, 8.0, 8.0, 9.0, 6.0, 6.0, 6.0, 7.0, 6.0, 9.0, 6.0, 7.0, 6.0, 10.0, 7.0, 7.0, 6.0, 8.0, 8.0, 6.0, 7.0, 6.0, 7.0, 6.0, 6.0, 7.0, 6.0},
            {9.0, 8.0, 6.0, 6.0, 7.0, 6.0, 8.0, 8.0, 6.0, 7.0, 7.0, 6.0, 6.0, 7.0, 8.0, 8.0, 8.0, 7.0, 10.0, 7.0, 9.0, 8.0, 9.0, 7.0, 6.0, 8.0, 8.0, 6.0, 7.0, 6.0},
            {9.0, 9.0, 6.0, 6.0, 6.0, 6.0, 6.0, 8.0, 9.0, 7.0, 8.0, 9.0, 8.0, 6.0, 7.0, 6.0, 6.0, 6.0, 8.0, 6.0, 9.0, 7.0, 6.0, 8.0, 6.0, 7.0, 7.0, 8.0, 6.0, 6.0},
            {10.0, 8.0, 6.0, 7.0, 8.0, 6.0, 9.0, 10.0, 6.0, 10.0, 8.0, 6.0, 6.0, 8.0, 6.0, 6.0, 6.0, 7.0, 8.0, 9.0, 7.0, 8.0, 7.0, 8.0, 10.0, 7.0, 6.0, 6.0, 10.0, 6.0},
            {6.0, 6.0, 6.0, 8.0, 8.0, 9.0, 8.0, 7.0, 6.0, 10.0, 8.0, 6.0, 9.0, 7.0, 7.0, 6.0, 8.0, 6.0, 6.0, 7.0, 7.0, 9.0, 6.0, 7.0, 6.0, 8.0, 8.0, 9.0, 6.0, 6.0},
            {8.0, 10.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 6.0, 8.0, 9.0, 10.0, 6.0, 8.0, 7.0, 6.0, 8.0, 7.0, 9.0, 6.0, 9.0, 7.0, 6.0, 8.0, 9.0, 7.0, 7.0, 6.0},
            {7.0, 9.0, 7.0, 8.0, 9.0, 6.0, 7.0, 9.0, 6.0, 8.0, 9.0, 7.0, 6.0, 8.0, 7.0, 6.0, 7.0, 9.0, 8.0, 8.0, 10.0, 9.0, 6.0, 9.0, 10.0, 8.0, 8.0, 6.0, 10.0, 7.0},
            {8.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 9.0, 6.0, 6.0, 6.0, 6.0, 10.0, 7.0, 6.0, 6.0, 10.0, 6.0, 7.0, 9.0, 8.0, 6.0, 9.0, 8.0, 7.0, 7.0, 6.0, 6.0, 8.0, 7.0},
            {8.0, 9.0, 8.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 9.0, 6.0, 6.0, 8.0, 8.0, 8.0, 8.0, 7.0, 6.0, 8.0, 7.0, 7.0, 10.0, 6.0, 6.0, 7.0, 6.0, 9.0, 6.0, 6.0, 9.0},
            {7.0, 8.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 9.0, 6.0, 8.0, 9.0, 8.0, 9.0, 8.0, 6.0, 6.0, 8.0, 7.0, 8.0, 7.0, 6.0, 6.0, 6.0, 9.0, 7.0, 7.0, 6.0, 6.0},
            {7.0, 7.0, 6.0, 8.0, 9.0, 8.0, 7.0, 8.0, 6.0, 8.0, 6.0, 6.0, 7.0, 8.0, 6.0, 9.0, 7.0, 6.0, 8.0, 9.0, 6.0, 6.0, 8.0, 8.0, 6.0, 8.0, 9.0, 6.0, 7.0, 6.0},
            {9.0, 8.0, 7.0, 6.0, 7.0, 6.0, 6.0, 8.0, 8.0, 6.0, 6.0, 6.0, 8.0, 7.0, 7.0, 8.0, 9.0, 8.0, 7.0, 8.0, 6.0, 10.0, 10.0, 8.0, 6.0, 8.0, 8.0, 6.0, 8.0, 6.0},
            {7.0, 8.0, 7.0, 6.0, 7.0, 7.0, 6.0, 7.0, 9.0, 8.0, 6.0, 8.0, 10.0, 8.0, 7.0, 6.0, 8.0, 7.0, 8.0, 7.0, 7.0, 9.0, 8.0, 9.0, 6.0, 6.0, 7.0, 6.0, 6.0, 6.0},
            {7.0, 8.0, 7.0, 7.0, 8.0, 8.0, 6.0, 6.0, 6.0, 7.0, 6.0, 7.0, 6.0, 8.0, 8.0, 6.0, 10.0, 8.0, 7.0, 7.0, 6.0, 9.0, 9.0, 6.0, 6.0, 6.0, 7.0, 9.0, 6.0, 8.0},
            {8.0, 8.0, 6.0, 6.0, 8.0, 6.0, 9.0, 7.0, 6.0, 8.0, 7.0, 7.0, 10.0, 6.0, 7.0, 9.0, 7.0, 7.0, 8.0, 7.0, 8.0, 8.0, 7.0, 6.0, 6.0, 7.0, 8.0, 8.0, 8.0, 7.0},
            {7.0, 9.0, 6.0, 6.0, 7.0, 7.0, 7.0, 6.0, 8.0, 7.0, 6.0, 7.0, 8.0, 8.0, 7.0, 8.0, 7.0, 9.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 8.0, 6.0},
            {7.0, 8.0, 8.0, 6.0, 6.0, 7.0, 8.0, 6.0, 7.0, 8.0, 8.0, 6.0, 6.0, 9.0, 8.0, 8.0, 6.0, 6.0, 6.0, 6.0, 8.0, 7.0, 6.0, 9.0, 7.0, 6.0, 10.0, 7.0, 6.0, 6.0},
            {8.0, 10.0, 7.0, 8.0, 7.0, 8.0, 6.0, 6.0, 8.0, 8.0, 7.0, 6.0, 7.0, 8.0, 6.0, 8.0, 6.0, 7.0, 8.0, 9.0, 7.0, 8.0, 6.0, 6.0, 6.0, 8.0, 6.0, 6.0, 8.0, 6.0},
            {7.0, 9.0, 6.0, 9.0, 6.0, 6.0, 6.0, 7.0, 10.0, 6.0, 6.0, 6.0, 6.0, 8.0, 9.0, 8.0, 6.0, 7.0, 7.0, 6.0, 7.0, 7.0, 7.0, 9.0, 7.0, 8.0, 6.0, 6.0, 7.0, 6.0},
            {8.0, 6.0, 7.0, 7.0, 7.0, 8.0, 7.0, 6.0, 9.0, 7.0, 6.0, 7.0, 10.0, 7.0, 6.0, 8.0, 9.0, 8.0, 9.0, 6.0, 7.0, 9.0, 6.0, 10.0, 6.0, 7.0, 9.0, 7.0, 7.0, 8.0},
            {6.0, 10.0, 7.0, 6.0, 9.0, 6.0, 7.0, 7.0, 7.0, 10.0, 7.0, 7.0, 7.0, 6.0, 7.0, 9.0, 7.0, 6.0, 8.0, 10.0, 9.0, 8.0, 9.0, 6.0, 6.0, 10.0, 8.0, 6.0, 6.0, 8.0},
            {6.0, 10.0, 6.0, 7.0, 7.0, 7.0, 8.0, 9.0, 6.0, 10.0, 7.0, 8.0, 9.0, 8.0, 7.0, 10.0, 6.0, 6.0, 8.0, 7.0, 10.0, 10.0, 7.0, 6.0, 6.0, 6.0, 7.0, 6.0, 8.0, 7.0},
            {8.0, 10.0, 6.0, 6.0, 7.0, 8.0, 6.0, 9.0, 7.0, 6.0, 6.0, 8.0, 9.0, 6.0, 6.0, 6.0, 8.0, 6.0, 8.0, 9.0, 7.0, 6.0, 8.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0},
            {6.0, 10.0, 7.0, 7.0, 7.0, 9.0, 6.0, 6.0, 7.0, 6.0, 6.0, 6.0, 10.0, 6.0, 6.0, 7.0, 6.0, 8.0, 8.0, 6.0, 9.0, 8.0, 7.0, 6.0, 6.0, 6.0, 9.0, 6.0, 8.0, 10.0},
            {8.0, 10.0, 6.0, 8.0, 7.0, 7.0, 7.0, 6.0, 8.0, 10.0, 6.0, 6.0, 7.0, 6.0, 9.0, 6.0, 8.0, 9.0, 7.0, 6.0, 8.0, 7.0, 10.0, 8.0, 6.0, 8.0, 9.0, 7.0, 7.0, 6.0},
            {9.0, 8.0, 6.0, 9.0, 7.0, 6.0, 8.0, 9.0, 9.0, 6.0, 6.0, 7.0, 8.0, 8.0, 8.0, 6.0, 7.0, 6.0, 7.0, 7.0, 8.0, 7.0, 7.0, 7.0, 7.0, 8.0, 10.0, 6.0, 10.0, 6.0},
            {9.0, 10.0, 6.0, 9.0, 8.0, 6.0, 8.0, 6.0, 7.0, 9.0, 7.0, 7.0, 8.0, 6.0, 7.0, 6.0, 7.0, 8.0, 6.0, 9.0, 9.0, 7.0, 6.0, 8.0, 6.0, 9.0, 6.0, 10.0, 7.0, 7.0},
            {6.0, 10.0, 9.0, 9.0, 8.0, 7.0, 6.0, 7.0, 7.0, 8.0, 8.0, 6.0, 8.0, 6.0, 7.0, 9.0, 8.0, 8.0, 6.0, 7.0, 6.0, 9.0, 6.0, 7.0, 6.0, 8.0, 7.0, 6.0, 8.0, 6.0},
            {6.0, 8.0, 6.0, 7.0, 8.0, 8.0, 6.0, 6.0, 9.0, 7.0, 7.0, 6.0, 7.0, 7.0, 7.0, 10.0, 7.0, 7.0, 8.0, 6.0, 6.0, 6.0, 6.0, 7.0, 6.0, 7.0, 9.0, 6.0, 7.0, 6.0},
            {10.0, 10.0, 7.0, 6.0, 6.0, 7.0, 8.0, 10.0, 8.0, 7.0, 6.0, 6.0, 9.0, 8.0, 6.0, 10.0, 6.0, 7.0, 6.0, 9.0, 6.0, 8.0, 7.0, 8.0, 8.0, 6.0, 7.0, 6.0, 8.0, 6.0},
            {9.0, 6.0, 7.0, 6.0, 6.0, 6.0, 8.0, 10.0, 6.0, 7.0, 6.0, 7.0, 9.0, 6.0, 6.0, 9.0, 8.0, 7.0, 8.0, 7.0, 7.0, 9.0, 9.0, 7.0, 6.0, 6.0, 8.0, 6.0, 8.0, 6.0},
            {6.0, 10.0, 8.0, 7.0, 9.0, 7.0, 6.0, 7.0, 8.0, 8.0, 9.0, 6.0, 6.0, 8.0, 6.0, 7.0, 6.0, 6.0, 9.0, 6.0, 8.0, 7.0, 7.0, 6.0, 6.0, 6.0, 10.0, 6.0, 6.0, 9.0},
            {6.0, 10.0, 6.0, 9.0, 8.0, 6.0, 7.0, 10.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 8.0, 6.0, 8.0, 6.0, 9.0, 10.0, 7.0, 9.0, 6.0, 10.0, 6.0, 6.0, 7.0, 8.0},
            {7.0, 6.0, 6.0, 6.0, 7.0, 8.0, 8.0, 6.0, 6.0, 10.0, 6.0, 6.0, 10.0, 7.0, 7.0, 6.0, 10.0, 6.0, 8.0, 6.0, 8.0, 6.0, 8.0, 7.0, 8.0, 8.0, 9.0, 6.0, 8.0, 6.0},
            {6.0, 8.0, 10.0, 7.0, 8.0, 6.0, 10.0, 10.0, 6.0, 7.0, 6.0, 7.0, 6.0, 8.0, 7.0, 6.0, 9.0, 6.0, 9.0, 6.0, 7.0, 10.0, 7.0, 10.0, 8.0, 8.0, 8.0, 7.0, 8.0, 6.0},
            {9.0, 10.0, 8.0, 9.0, 7.0, 6.0, 6.0, 6.0, 9.0, 7.0, 6.0, 7.0, 8.0, 10.0, 6.0, 8.0, 6.0, 8.0, 7.0, 6.0, 9.0, 7.0, 6.0, 10.0, 6.0, 9.0, 9.0, 6.0, 9.0, 7.0},
            {6.0, 9.0, 6.0, 7.0, 8.0, 6.0, 8.0, 6.0, 8.0, 6.0, 6.0, 8.0, 7.0, 7.0, 8.0, 7.0, 9.0, 8.0, 7.0, 6.0, 8.0, 9.0, 7.0, 8.0, 6.0, 8.0, 9.0, 7.0, 6.0, 6.0},
            {7.0, 9.0, 6.0, 6.0, 6.0, 6.0, 9.0, 6.0, 9.0, 6.0, 8.0, 6.0, 9.0, 7.0, 7.0, 6.0, 9.0, 6.0, 9.0, 9.0, 10.0, 9.0, 8.0, 9.0, 6.0, 8.0, 6.0, 8.0, 6.0, 8.0},
            {8.0, 10.0, 7.0, 8.0, 6.0, 8.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 8.0, 6.0, 8.0, 6.0, 6.0, 7.0, 7.0, 6.0, 8.0, 10.0, 8.0, 7.0, 6.0, 6.0, 7.0, 8.0, 6.0, 7.0},
            {6.0, 8.0, 6.0, 8.0, 6.0, 6.0, 7.0, 8.0, 7.0, 7.0, 6.0, 6.0, 8.0, 8.0, 6.0, 9.0, 10.0, 7.0, 8.0, 6.0, 7.0, 7.0, 6.0, 7.0, 6.0, 9.0, 6.0, 6.0, 8.0, 6.0},
            {6.0, 7.0, 6.0, 9.0, 9.0, 7.0, 7.0, 7.0, 8.0, 8.0, 8.0, 7.0, 8.0, 6.0, 10.0, 7.0, 7.0, 7.0, 8.0, 10.0, 8.0, 10.0, 10.0, 8.0, 7.0, 6.0, 6.0, 6.0, 9.0, 6.0},
            {8.0, 8.0, 8.0, 7.0, 7.0, 6.0, 7.0, 6.0, 9.0, 7.0, 6.0, 6.0, 8.0, 9.0, 7.0, 7.0, 8.0, 6.0, 8.0, 6.0, 9.0, 6.0, 7.0, 6.0, 6.0, 7.0, 6.0, 7.0, 8.0, 7.0},
            {9.0, 9.0, 6.0, 6.0, 7.0, 6.0, 7.0, 7.0, 10.0, 7.0, 10.0, 7.0, 8.0, 7.0, 6.0, 10.0, 6.0, 6.0, 8.0, 7.0, 7.0, 9.0, 7.0, 7.0, 6.0, 8.0, 8.0, 6.0, 6.0, 6.0},
            {7.0, 8.0, 6.0, 8.0, 8.0, 7.0, 6.0, 7.0, 7.0, 8.0, 8.0, 7.0, 6.0, 7.0, 8.0, 7.0, 6.0, 7.0, 9.0, 7.0, 6.0, 8.0, 9.0, 9.0, 6.0, 8.0, 10.0, 7.0, 7.0, 6.0},
            {7.0, 9.0, 8.0, 7.0, 7.0, 7.0, 6.0, 8.0, 6.0, 6.0, 6.0, 7.0, 9.0, 7.0, 7.0, 6.0, 8.0, 7.0, 8.0, 6.0, 6.0, 7.0, 6.0, 8.0, 8.0, 7.0, 6.0, 6.0, 9.0, 10.0},
            {9.0, 7.0, 8.0, 7.0, 7.0, 8.0, 8.0, 8.0, 10.0, 10.0, 6.0, 6.0, 10.0, 7.0, 7.0, 8.0, 7.0, 7.0, 9.0, 6.0, 8.0, 8.0, 7.0, 9.0, 6.0, 7.0, 7.0, 6.0, 6.0, 6.0},
            {8.0, 10.0, 8.0, 8.0, 7.0, 6.0, 7.0, 8.0, 7.0, 7.0, 6.0, 10.0, 7.0, 7.0, 10.0, 7.0, 6.0, 8.0, 7.0, 6.0, 8.0, 8.0, 7.0, 9.0, 6.0, 6.0, 9.0, 6.0, 9.0, 7.0},
            {8.0, 6.0, 8.0, 6.0, 9.0, 7.0, 10.0, 7.0, 8.0, 8.0, 7.0, 6.0, 7.0, 8.0, 7.0, 6.0, 10.0, 6.0, 8.0, 9.0, 6.0, 9.0, 6.0, 7.0, 6.0, 6.0, 9.0, 7.0, 6.0, 7.0},
            {8.0, 7.0, 6.0, 10.0, 6.0, 6.0, 7.0, 6.0, 6.0, 8.0, 6.0, 7.0, 8.0, 10.0, 8.0, 6.0, 10.0, 6.0, 7.0, 6.0, 10.0, 6.0, 9.0, 8.0, 8.0, 8.0, 6.0, 9.0, 7.0, 7.0},
            {7.0, 8.0, 6.0, 9.0, 7.0, 6.0, 6.0, 9.0, 9.0, 6.0, 6.0, 6.0, 8.0, 9.0, 7.0, 8.0, 8.0, 6.0, 6.0, 6.0, 8.0, 6.0, 9.0, 8.0, 7.0, 7.0, 8.0, 8.0, 6.0, 9.0},
            {8.0, 7.0, 7.0, 9.0, 7.0, 6.0, 7.0, 6.0, 10.0, 6.0, 6.0, 6.0, 9.0, 7.0, 6.0, 7.0, 6.0, 8.0, 8.0, 6.0, 6.0, 7.0, 8.0, 6.0, 6.0, 7.0, 7.0, 6.0, 6.0, 9.0},
            {8.0, 9.0, 7.0, 8.0, 8.0, 6.0, 10.0, 8.0, 8.0, 8.0, 7.0, 6.0, 7.0, 7.0, 8.0, 8.0, 8.0, 9.0, 6.0, 10.0, 6.0, 10.0, 6.0, 10.0, 6.0, 7.0, 8.0, 7.0, 8.0, 6.0},
            {6.0, 8.0, 8.0, 6.0, 6.0, 6.0, 9.0, 7.0, 6.0, 10.0, 6.0, 8.0, 8.0, 7.0, 9.0, 9.0, 6.0, 7.0, 6.0, 6.0, 10.0, 7.0, 6.0, 8.0, 6.0, 9.0, 8.0, 6.0, 7.0, 6.0},
            {10.0, 10.0, 6.0, 8.0, 9.0, 6.0, 7.0, 7.0, 8.0, 8.0, 7.0, 7.0, 7.0, 6.0, 8.0, 9.0, 10.0, 6.0, 8.0, 7.0, 9.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 6.0, 6.0, 6.0},
            {6.0, 10.0, 6.0, 7.0, 7.0, 10.0, 8.0, 7.0, 10.0, 9.0, 6.0, 7.0, 6.0, 9.0, 8.0, 7.0, 7.0, 6.0, 7.0, 8.0, 6.0, 6.0, 8.0, 8.0, 8.0, 8.0, 9.0, 6.0, 6.0, 6.0},
            {8.0, 10.0, 6.0, 7.0, 8.0, 8.0, 8.0, 7.0, 7.0, 8.0, 6.0, 6.0, 9.0, 7.0, 7.0, 6.0, 6.0, 9.0, 8.0, 7.0, 8.0, 6.0, 6.0, 7.0, 9.0, 6.0, 10.0, 7.0, 7.0, 6.0},
            {10.0, 7.0, 6.0, 7.0, 6.0, 10.0, 7.0, 8.0, 6.0, 8.0, 8.0, 7.0, 8.0, 8.0, 7.0, 7.0, 9.0, 6.0, 6.0, 9.0, 6.0, 8.0, 6.0, 7.0, 7.0, 8.0, 6.0, 7.0, 7.0, 7.0},
            {6.0, 6.0, 8.0, 6.0, 6.0, 6.0, 7.0, 7.0, 9.0, 10.0, 6.0, 6.0, 8.0, 7.0, 8.0, 8.0, 6.0, 8.0, 8.0, 9.0, 7.0, 10.0, 7.0, 8.0, 7.0, 7.0, 10.0, 7.0, 8.0, 8.0},
            {8.0, 7.0, 7.0, 6.0, 8.0, 7.0, 7.0, 8.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 9.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 6.0, 7.0, 8.0, 6.0, 7.0, 9.0, 6.0, 8.0, 7.0},
            {8.0, 8.0, 6.0, 8.0, 7.0, 7.0, 7.0, 6.0, 9.0, 6.0, 6.0, 7.0, 6.0, 6.0, 10.0, 8.0, 8.0, 6.0, 9.0, 6.0, 8.0, 6.0, 9.0, 7.0, 6.0, 6.0, 9.0, 6.0, 10.0, 6.0},
            {8.0, 6.0, 9.0, 8.0, 6.0, 8.0, 6.0, 7.0, 8.0, 8.0, 6.0, 6.0, 6.0, 7.0, 6.0, 7.0, 10.0, 8.0, 10.0, 6.0, 9.0, 8.0, 9.0, 10.0, 6.0, 7.0, 6.0, 7.0, 10.0, 6.0},
            {6.0, 9.0, 6.0, 7.0, 6.0, 6.0, 7.0, 7.0, 8.0, 8.0, 6.0, 9.0, 7.0, 8.0, 10.0, 8.0, 9.0, 8.0, 6.0, 6.0, 8.0, 8.0, 6.0, 8.0, 7.0, 9.0, 7.0, 7.0, 8.0, 9.0},
            {7.0, 6.0, 7.0, 7.0, 6.0, 6.0, 8.0, 8.0, 7.0, 8.0, 6.0, 7.0, 7.0, 9.0, 7.0, 7.0, 10.0, 7.0, 7.0, 6.0, 8.0, 8.0, 6.0, 9.0, 9.0, 7.0, 7.0, 6.0, 7.0, 6.0},
            {8.0, 7.0, 6.0, 6.0, 9.0, 6.0, 8.0, 6.0, 7.0, 8.0, 6.0, 6.0, 9.0, 8.0, 6.0, 6.0, 9.0, 6.0, 7.0, 8.0, 6.0, 10.0, 8.0, 8.0, 8.0, 8.0, 8.0, 7.0, 9.0, 6.0},
            {8.0, 7.0, 7.0, 8.0, 7.0, 9.0, 7.0, 6.0, 7.0, 6.0, 6.0, 6.0, 9.0, 7.0, 6.0, 6.0, 10.0, 7.0, 9.0, 8.0, 8.0, 7.0, 6.0, 8.0, 6.0, 8.0, 8.0, 6.0, 8.0, 7.0},
            {6.0, 8.0, 6.0, 8.0, 6.0, 6.0, 6.0, 10.0, 7.0, 8.0, 6.0, 8.0, 6.0, 8.0, 8.0, 8.0, 6.0, 7.0, 8.0, 7.0, 9.0, 6.0, 6.0, 7.0, 8.0, 7.0, 7.0, 8.0, 6.0, 7.0},
            {6.0, 6.0, 6.0, 6.0, 7.0, 6.0, 9.0, 8.0, 6.0, 7.0, 7.0, 7.0, 8.0, 6.0, 9.0, 7.0, 7.0, 7.0, 7.0, 6.0, 9.0, 10.0, 8.0, 6.0, 7.0, 8.0, 8.0, 7.0, 7.0, 8.0},
            {7.0, 10.0, 6.0, 8.0, 6.0, 7.0, 7.0, 6.0, 9.0, 6.0, 6.0, 10.0, 9.0, 7.0, 7.0, 6.0, 6.0, 10.0, 6.0, 6.0, 8.0, 8.0, 8.0, 6.0, 6.0, 8.0, 10.0, 7.0, 6.0, 7.0},
            {6.0, 10.0, 6.0, 7.0, 6.0, 8.0, 9.0, 7.0, 9.0, 6.0, 6.0, 7.0, 6.0, 6.0, 7.0, 9.0, 9.0, 8.0, 8.0, 8.0, 6.0, 9.0, 7.0, 9.0, 6.0, 7.0, 8.0, 8.0, 7.0, 6.0},
            {6.0, 9.0, 6.0, 8.0, 6.0, 7.0, 7.0, 6.0, 8.0, 8.0, 6.0, 6.0, 7.0, 7.0, 7.0, 8.0, 7.0, 6.0, 7.0, 6.0, 7.0, 10.0, 7.0, 6.0, 8.0, 7.0, 10.0, 8.0, 10.0, 8.0},
            {6.0, 7.0, 8.0, 6.0, 6.0, 8.0, 9.0, 7.0, 7.0, 6.0, 6.0, 7.0, 7.0, 8.0, 7.0, 10.0, 7.0, 6.0, 7.0, 7.0, 6.0, 7.0, 6.0, 6.0, 6.0, 8.0, 8.0, 7.0, 8.0, 7.0},
            {8.0, 8.0, 10.0, 9.0, 6.0, 6.0, 6.0, 6.0, 9.0, 10.0, 6.0, 6.0, 6.0, 6.0, 8.0, 9.0, 7.0, 6.0, 8.0, 7.0, 7.0, 8.0, 6.0, 7.0, 6.0, 6.0, 8.0, 7.0, 10.0, 6.0},
            {8.0, 9.0, 9.0, 8.0, 7.0, 7.0, 6.0, 7.0, 6.0, 9.0, 6.0, 7.0, 9.0, 7.0, 7.0, 6.0, 10.0, 6.0, 6.0, 8.0, 6.0, 7.0, 6.0, 9.0, 6.0, 7.0, 10.0, 6.0, 7.0, 7.0},
            {7.0, 8.0, 6.0, 8.0, 7.0, 6.0, 8.0, 10.0, 6.0, 6.0, 6.0, 9.0, 7.0, 6.0, 8.0, 8.0, 8.0, 6.0, 7.0, 8.0, 8.0, 8.0, 6.0, 7.0, 7.0, 7.0, 8.0, 8.0, 6.0, 7.0},
            {8.0, 7.0, 6.0, 6.0, 8.0, 6.0, 9.0, 6.0, 7.0, 7.0, 6.0, 8.0, 8.0, 8.0, 7.0, 7.0, 6.0, 7.0, 6.0, 8.0, 7.0, 10.0, 8.0, 8.0, 6.0, 7.0, 7.0, 9.0, 7.0, 8.0},
            {7.0, 7.0, 6.0, 9.0, 6.0, 6.0, 8.0, 10.0, 7.0, 9.0, 6.0, 6.0, 9.0, 10.0, 6.0, 6.0, 7.0, 7.0, 7.0, 9.0, 6.0, 8.0, 10.0, 9.0, 6.0, 9.0, 8.0, 7.0, 6.0, 8.0},
            {10.0, 10.0, 8.0, 6.0, 10.0, 7.0, 6.0, 7.0, 7.0, 6.0, 8.0, 6.0, 8.0, 9.0, 6.0, 8.0, 9.0, 7.0, 6.0, 9.0, 6.0, 7.0, 6.0, 8.0, 8.0, 10.0, 8.0, 6.0, 6.0, 6.0},
            {10.0, 6.0, 8.0, 6.0, 7.0, 6.0, 6.0, 6.0, 9.0, 6.0, 6.0, 8.0, 6.0, 7.0, 8.0, 10.0, 8.0, 7.0, 6.0, 8.0, 7.0, 9.0, 7.0, 8.0, 9.0, 8.0, 7.0, 8.0, 6.0, 6.0},
            {8.0, 10.0, 6.0, 7.0, 6.0, 7.0, 9.0, 8.0, 6.0, 8.0, 7.0, 6.0, 7.0, 7.0, 7.0, 7.0, 10.0, 6.0, 7.0, 7.0, 8.0, 9.0, 7.0, 8.0, 8.0, 9.0, 8.0, 7.0, 10.0, 6.0},
            {6.0, 9.0, 6.0, 8.0, 6.0, 8.0, 8.0, 8.0, 7.0, 9.0, 9.0, 7.0, 8.0, 7.0, 6.0, 10.0, 7.0, 7.0, 9.0, 6.0, 6.0, 10.0, 6.0, 9.0, 6.0, 8.0, 7.0, 7.0, 6.0, 6.0},
            {7.0, 6.0, 10.0, 6.0, 8.0, 6.0, 8.0, 8.0, 7.0, 7.0, 7.0, 6.0, 10.0, 7.0, 7.0, 7.0, 6.0, 7.0, 9.0, 6.0, 6.0, 6.0, 8.0, 7.0, 6.0, 8.0, 10.0, 7.0, 8.0, 6.0},
            {9.0, 10.0, 10.0, 6.0, 8.0, 6.0, 9.0, 7.0, 7.0, 7.0, 6.0, 7.0, 6.0, 6.0, 7.0, 6.0, 8.0, 7.0, 8.0, 10.0, 7.0, 10.0, 8.0, 8.0, 8.0, 10.0, 9.0, 8.0, 6.0, 8.0},
            {6.0, 6.0, 6.0, 9.0, 6.0, 6.0, 8.0, 10.0, 9.0, 7.0, 8.0, 8.0, 10.0, 7.0, 6.0, 9.0, 7.0, 6.0, 10.0, 7.0, 8.0, 8.0, 6.0, 6.0, 6.0, 7.0, 9.0, 6.0, 6.0, 6.0},
            {6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 10.0, 8.0, 7.0, 8.0, 6.0, 6.0, 8.0, 7.0, 7.0, 6.0, 10.0, 8.0, 7.0, 9.0, 6.0, 6.0, 9.0, 6.0, 6.0, 6.0, 10.0, 6.0, 7.0, 6.0},
};

        double[][] current_grades={
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 8.0, -1.0, 8.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 7.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 5.0, -1.0, 7.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 6.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 5.0, -1.0, 5.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 5.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 5.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 5.0, -1.0, 5.0, -1.0, 5.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 5.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 5.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 10.0, -1.0, 8.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 8.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 6.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 7.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 8.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 9.0, -1.0, 7.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 8.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 5.0, -1.0, 5.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 4.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 6.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 9.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 9.0, -1.0, 9.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 9.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 6.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 6.0, -1.0, 5.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 5.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 6.0, -1.0, 5.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 5.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 8.0, -1.0, 8.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 10.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 7.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 8.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 9.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 8.0, -1.0, 8.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 10.0, 10.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 6.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 5.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 5.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 5.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 5.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 6.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 9.0, -1.0, 7.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 8.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 8.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 7.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 5.0, -1.0, 8.0, -1.0, 5.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 8.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 7.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 8.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 9.0, -1.0, 8.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 5.0, -1.0, 5.0, -1.0, 6.0, -1.0, -1.0, 4.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 6.0, -1.0, 5.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 5.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 6.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 8.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 5.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 5.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 6.0, -1.0, 5.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 6.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 6.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 6.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 6.0, -1.0, 5.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 5.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 5.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 5.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 7.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 8.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 7.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 7.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 5.0, -1.0, 6.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 6.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 5.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 6.0, 5.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 8.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 7.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 9.0, -1.0, 8.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 9.0, 10.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 8.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 7.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 8.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 8.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 8.0, -1.0, 7.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 8.0, -1.0, 7.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 8.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 8.0, -1.0, 8.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 5.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 5.0, -1.0, 5.0, -1.0, -1.0, 4.0, -1.0, -1.0, -1.0, -1.0, 6.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 9.0, -1.0, 9.0, -1.0, -1.0, 10.0, -1.0, -1.0, -1.0, -1.0, 9.0, 10.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 9.0, -1.0, 7.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 8.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 7.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 7.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 9.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 7.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 8.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 9.0, -1.0, 7.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 8.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 8.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 8.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 10.0, -1.0, 9.0, -1.0, 9.0, -1.0, -1.0, 10.0, -1.0, -1.0, -1.0, -1.0, 8.0, 10.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 8.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 9.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 6.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 7.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},

        };


        int number_of_courses = graduate_grades[0].length;

        int[] cl_student_id = Cum_Laude_Graduates(graduate_grades);

       // System.out.println(Arrays.deepToString(Similarity_Array(graduate_grades, number_of_courses)));
        //System.out.println(Arrays.deepToString(Similarity_Array(current_grades, number_of_courses)));
        /* 
        //only used for printing the arrays  (id's are not not the ones from csv for currentGrades);
        System.out.println("number of courses: "+number_of_courses);
        System.out.println("graduate_grades for id's: \n");
        for(int i=0; i<graduate_grades.length; i++){
            if(graduate_grades[i] == null){continue;}
            System.out.println(i+": "+Arrays.toString(graduate_grades[i]));
		}
        System.out.println("\n\n" + "graduate_grades for id's: \n");
        for(int i=0; i<current_grades.length; i++){
            if(current_grades[i] == null){continue;}
            System.out.println(i+" "+Arrays.toString(current_grades[i]));
		}
        System.out.println("\n\n");
        System.out.println("Cum Laudge student's id:\n" +Arrays.toString(cl_student_id));
    */

    // answers  step 1
    System.out.println("Hardest coures: ");
    System.out.println("Easiest coures: ");
    System.out.println("Number of students with Cum Ludge: "+cl_student_id.length);
    System.out.println("Their ID's : "+Arrays.toString(cl_student_id));
    System.out.println("Most similar courses: ");
    Comparing_Courses(Similarity_Array(graduate_grades, number_of_courses),graduate_grades,number_of_courses);
    }

    public static double[][] File_To_Array(String fileName){
        try {
            double[][] studentGradesArray = new double[0][];
            File file=new File(fileName);
            Scanner fileScanner = new Scanner(file);

            int numOfCourses = 30;
            int studentID = -1; //small value to initialize
            int arrayLength=-1; //small value to initialize

            int linesDone = 0;
            while (fileScanner.hasNextLine() && linesDone <= 5) {
            	String line = fileScanner.nextLine();
            	linesDone++;
                int courseIndex = 0;    //keeps track of the course

            	// and one that scans the line entry per entry using the commas as delimiters
            	Scanner lineScanner = new Scanner(line);
                lineScanner.useDelimiter(",");
            	while (lineScanner.hasNext()) {
            		if (lineScanner.hasNextInt()) {
            			studentID = lineScanner.nextInt();

                        //If the index (indicated by studentID) is larger than the length of the array:
                        //  create a larger array with length studentID+1
                        if(arrayLength<studentID){
                            arrayLength = studentID;
                            studentGradesArray = Arrays.copyOf(studentGradesArray, studentID+1);
                        }
                        //initialises only the studentID's we need to save resources
                        studentGradesArray[studentID] = new double[numOfCourses];

            		} else if (lineScanner.hasNextDouble()) {
            			double d = lineScanner.nextDouble();
                        studentGradesArray[studentID][courseIndex]=d;
                        courseIndex++;
            		} else {
            			String s = lineScanner.next();
                        if(s.equals("NG")){
                            studentGradesArray[studentID][courseIndex]=-1;
                        }
                        courseIndex++;
            		}
            	}
            	lineScanner.close();
            }
            fileScanner.close();
            //prints the grades array per row with student index

            return studentGradesArray;

        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }



     /*
     *
     * STEP 1
     *  - calculatating: mean median spread of grades for Students/Courses
     *  - creating list of honored students Cum Laude
     *  - findind similiarities between courses
     *
     */


    /**calculates the mean, median and spread for a course with support for missing values
    * @param students_grades: a 2D-array containing studentID and grades
    * @param course: index of the grade corresponding to the course for a student
    * @return double array: containing {mean, median, spread}
    */
    public static double[] MMS_Course(double[][] students_grades, int course){
        double[] mms = {-1.0, -1.0, -1.0};
        int numOfstudents = 0;
        double[] courseGrades = new double[0];

        for (double[] student : students_grades) {
            if(student==null||student[course]==-1){continue;}
            numOfstudents++;
            courseGrades = Arrays.copyOf(courseGrades, numOfstudents);
            courseGrades[courseGrades.length-1] = student[course];
        }
        Arrays.sort(courseGrades);
        //System.out.println(Arrays.toString(courseGrades));
        if(numOfstudents==0)return mms;

        int len = courseGrades.length;

        //mean
        double sum = 0;
        for (double grade: courseGrades) {
            sum += grade;
        }
        double mean = sum/numOfstudents;
        mms[0] = round(sum/numOfstudents, 2);

        //median
        double median;
        if(len%2==1){ //odd
            median =  courseGrades[courseGrades.length/2];
        }else{  //even
            median = (courseGrades[len/2] + courseGrades[len/2-1])/2;
        }
        mms[1] = round(median, 2);

        // standard deviation
        double deviation = 0;
        for (double grade: courseGrades) {
            deviation += (grade - mean) * (grade - mean);
        }
        deviation = Math.sqrt( (deviation / mean) );

        mms[2] = round(deviation, 2);

        return mms;
    }

    /** Simple Gpa calculator supporting missing values
     * @param student_grades: array containing only grades/missing grades !no student index!
     * @return double GPA grade rounded to 2 decimal places
    **/
    public static double Calc_GPA(double[] student_grades ){
        // Gpa is calculated like mean (not considering credits of course)
        double sum=0.0;
        int decimal_places=2;
        for(double grade : student_grades){
            if(grade>=0){
                sum+=grade;
            }
        }
        return round((sum/student_grades.length), 2);
    }
    /** method returning array of Cum Ludge students
     * @param graduate_grades: no support for missing values
     * @return integer array
    */
    public static int[] Cum_Laude_Graduates (double[][] graduate_grades ){

        int num_of_honors=0;
        // checking number of the honored students
        for(int i=0; i<graduate_grades.length;i++){
            if(Calc_GPA(graduate_grades[i])>=8.00){
                num_of_honors++;
            }
        }
        double[] temp = new double[num_of_honors];
        num_of_honors=0;
        for(int i=0; i<graduate_grades.length;i++){
            System.out.println("graduate grades mean: "+Calc_GPA(graduate_grades[i]));
            if(Calc_GPA(graduate_grades[i])>=8.00){
                System.out.println("honor means: "+Calc_GPA(graduate_grades[i]));
                temp[num_of_honors]=i;
                num_of_honors++;
            }
        }
        int[] honored_students_id = Array_Double_To_Int(Arrays.copyOf(temp, num_of_honors));
        System.out.println(Arrays.toString(honored_students_id));
        return honored_students_id;
    }
    /** finding similarities between courses 
     * @param
     * @return integer array
    */



  /** used in other method
     * @param courseA first course
     * @param courseB second course
     * @param students_grades: a 2D-array containing studentID and grades
     * @return double from 0-10 to indicate similarity
     */
    public static double Course_Similarity(double[][] studentGradesArray, int courseA, int courseB){

        double differenceSum = 0;
        int numOfStudents = 0;
        for(double[] student: studentGradesArray){
            if(student!=null&&student[courseA]!=-1&&student[courseB]!=-1){
                numOfStudents++;
                differenceSum += Math.abs(student[courseA] - student[courseB]);
            }
        }
        if(numOfStudents==0){return -1;}
        return 10 - round(differenceSum/numOfStudents, 2);
    }

    /** finding similarities between courses
     * @param students_grades: a 2D-array containing studentID and grades
     * @param numOfCourses number of courses in the array
     * @return 2D array with values of type double that indicate similarity
    */
    public static double[][] Similarity_Array(double[][] studentGradesArray, int numOfCourses){
        double[][] array = new double[numOfCourses][numOfCourses];
        for(int A=0; A<numOfCourses; A++){
            for(int B=A; B<numOfCourses; B++){
                double similarity = round(Course_Similarity(studentGradesArray, A, B),2);
                array[A][B] = similarity;
                array[B][A]  =similarity;
            }
        }

        return array;
    }
    public static double[][] Comparing_Courses( double[][] similarity_array,double[][] studentGradesArray, int numOfCourses){
        double[][] array = new double[0][];
        // Similarity divides
        for(double[] row:similarity_array){
           // to finish

        }


        return array;
    }
     /*
     *
     * STEP 2
     *
     *
     */


    /*
     *
     *  SIMPLE OFTEN USED METHODS
     *
     */

    /** reuseable simple array prase int->double double->int
     * @param double_array/int_array: arrays of int or double type
     * @return prased array
    **/
    public static int[] Array_Double_To_Int(double[] double_array){
        int[] int_array = new int[double_array.length];
        for(int i=0;i<double_array.length;i++){
            int_array [i] = (int)double_array[i];
        }
        return int_array;
    }
    public static double[] Array_Int_To_Double(int[] int_array){
        double[] double_array = new double[int_array.length];
        for(int i=0;i<int_array.length;i++){
            double_array [i] = (double)int_array[i];
        }
        return double_array;
    }
     /** Simple rounding function to specified decimal place
     *  @param k: double to be rounded
     *  @param decimalPlace: specifies the decimal place for rounding
     *  @return double rounded number
    **/
    public static double round(double k, int decimalPlace){
        return Math.round(k*Math.pow(10,decimalPlace) )/Math.pow(10,decimalPlace);
    }

    public void IndexArrays(String [] [] StudentInfo) {

        for (int i = 1; i <= StudentInfo.length; i++) {
            if (i == 1) {
                //1 means Suruna
                for (int j = 0; j <= StudentInfo.length; j++) {
                    if (StudentInfo[i][j].equals("nulp")) {
                        NulpList.add(j);
                    }
                    if (StudentInfo[i][j].equals("nulp")) {
                        DootList.add(j);
                    }
                    if (StudentInfo[i][j].equals("lobi")) {
                        LobiList.add(j);
                    }
                }
            }
            if (i == 2) {
                // 2 means Hurny
                for (int j = 0; j <= StudentInfo.length; j++) {
                    if (StudentInfo[i][j].equals("full")) {
                        FullList.add(j);
                    }
                    if (StudentInfo[i][j].equals("high")) {
                        HighList.add(j);
                    }
                    if (StudentInfo[i][j].equals("medium")) {
                        MediumList.add(j);
                    }
                    if (StudentInfo[i][j].equals("low")) {
                        LowList.add(j);
                    }
                    if (StudentInfo[i][j].equals("nothing")) {
                        NothingList.add(j);
                    }
                }
            }
            if (i == 3) {
                // 3 means Lal count
                for (int j = 0; j <= StudentInfo.length; j++) {
                    if (StudentInfo[i][j].equals("100") || StudentInfo[i][j].equals("99") || StudentInfo[i][j].equals("98") || StudentInfo[i][j].equals("97") || StudentInfo[i][j].equals("96") || StudentInfo[i][j].equals("95") || StudentInfo[i][j].equals("94") || StudentInfo[i][j].equals("93") || StudentInfo[i][j].equals("92") || StudentInfo[i][j].equals("91") || StudentInfo[i][j].equals("90")) {
                        Lal1List.add(j);
                    }
                    if (StudentInfo[i][j].equals("89") || StudentInfo[i][j].equals("88") || StudentInfo[i][j].equals("87") || StudentInfo[i][j].equals("86") || StudentInfo[i][j].equals("85") || StudentInfo[i][j].equals("84") || StudentInfo[i][j].equals("83") || StudentInfo[i][j].equals("82") || StudentInfo[i][j].equals("81") || StudentInfo[i][j].equals("80")) {
                        Lal2List.add(j);
                    }
                    if (StudentInfo[i][j].equals("79") || StudentInfo[i][j].equals("78") || StudentInfo[i][j].equals("77") || StudentInfo[i][j].equals("76") || StudentInfo[i][j].equals("75") || StudentInfo[i][j].equals("74") || StudentInfo[i][j].equals("73") || StudentInfo[i][j].equals("72") || StudentInfo[i][j].equals("71") || StudentInfo[i][j].equals("70")) {
                        Lal3List.add(j);
                    }
                    if (StudentInfo[i][j].equals("69") || StudentInfo[i][j].equals("68") || StudentInfo[i][j].equals("67") || StudentInfo[i][j].equals("66") || StudentInfo[i][j].equals("65") || StudentInfo[i][j].equals("64") || StudentInfo[i][j].equals("63") || StudentInfo[i][j].equals("62") || StudentInfo[i][j].equals("61") || StudentInfo[i][j].equals("60") || StudentInfo[i][j].equals("59")) {
                        Lal4List.add(j);
                    }
                }
            }
            if (i == 4) {
                //4 means Volta
                for (int j = 0; j <= StudentInfo.length; j++) {
                    if (StudentInfo[i][j].equals("5 stars")) {
                        Stars5List.add(j);
                    }
                    if (StudentInfo[i][j].equals("4 stars")) {
                        Stars4List.add(j);
                    }
                    if (StudentInfo[i][j].equals("3 stars")) {
                        Stars3List.add(j);
                    }
                    if (StudentInfo[i][j].equals("2 stars")) {
                        Stars2List.add(j);
                    }
                    if (StudentInfo[i][j].equals("1 star")) {
                        Stars1List.add(j);
                    }
                }
            }
        }
        //Gets the positions of each student with a different type of property level
    }
    public double SumDIFF(int Coursenumber,double [] [] current_grades ,String [] [] StudentInfo) {
        double hisum = 0, lowsum = 0;
        int hiinstance = 0, lowinstance = 0;
        for (int i = 0; i <= current_grades.length; i++) {
            if (i == Coursenumber) {
                for (int j = 0; j <= current_grades.length; j++) {
                    if (HighList.contains(j)) {
                        hisum = hisum + current_grades[i][j];
                        hiinstance++;
                    }
                    if (LowList.contains(j)) {
                        lowsum = lowsum + current_grades[i][j];
                        lowinstance++;
                    }
                }
            }
        }

        //This for loop pretty much just computes the sum of grades of all high hurni level and low level instances given in order to get the average
        double meanHigh1 = hisum / hiinstance;
        double meanLow1 = lowsum / lowinstance;
        return meanHigh1-meanLow1;

        //This return function has the purpose to calculate the average and the difference between them
    }
        public double DecisionStump(int Coursenumber, double [] [] current_grades){
        double hisums=0,lowsums=0, temp1=0, temp2=0, temp3=0, temp4=0, temp5=0, temp6=0;
        int hiinstance2=0, lowinstance2=0;
        for (int i=0; i<=current_grades.length;i++){
            if (i==Coursenumber){
                for(int j=0;j<= current_grades.length;j++){
                    if (FullList.contains(j)){
                        hisums= hisums+current_grades[i] [j];
                        hiinstance2++;
                    }
                    if (NothingList.contains(j)){
                        lowsums=lowsums+current_grades[i] [j];
                        lowinstance2++;
                    }
                    if (NulpList.contains(j)){
                        temp1=temp1 + current_grades[i] [j];
                    }
                    if (LobiList.contains(j)){
                        temp2=temp2 + current_grades [i] [j];
                    }
                    if (Lal1List.contains(j)) {
                        temp3=temp3+ current_grades [i] [j];
                    }
                    if (Lal4List.contains(j)) {
                        temp4=temp4+ current_grades [i] [j];
                    }
                    if (Stars5List.contains(j)) {
                        temp5=temp5+ current_grades [i] [j];
                    }
                    if (Stars1List.contains(j)) {
                        temp6=temp6+ current_grades [i] [j];
                    }
                }
            }
        }
        double bestproperty=hisums-lowsums; String BestProperty="Hurni";
        if (bestproperty<temp1-temp2){
            bestproperty=temp1 -temp2;
            BestProperty="Suruna";
        }
        if (bestproperty<temp3-temp4){
            bestproperty=temp3 -temp4;
            BestProperty="Lal";
            System.out.println("Lal");
        }
        if (bestproperty<temp5-temp6){
            bestproperty=temp5 -temp6;
            BestProperty="Volta";
        }
        //Finds out the best property for a Course(the one that impacts the grade the most) by summing up all the grades of the people with the highest and respectively
            //the lowest level of that property and then finding out how big the difference between them is, this difference is compared between all values in order to
            //find out the best property.
        double Expectedgrade=0;
        int Studentnumber=0;
        if (BestProperty.equals("Hurni")) {
            if (FullList.contains(Studentnumber)) {
                Expectedgrade=calculateExpectedGrade(FullList, Studentnumber, current_grades, Coursenumber);
            }
            if (HighList.contains(Studentnumber)) {
                Expectedgrade=calculateExpectedGrade(HighList, Studentnumber, current_grades, Coursenumber);
            }
            if (MediumList.contains(Studentnumber)) {
                Expectedgrade=calculateExpectedGrade(MediumList, Studentnumber, current_grades, Coursenumber);
            }
            if (LowList.contains(Studentnumber)) {
                Expectedgrade=calculateExpectedGrade(LowList, Studentnumber, current_grades, Coursenumber);
            }
            if (NothingList.contains(Studentnumber)) {
                Expectedgrade=calculateExpectedGrade(NothingList, Studentnumber, current_grades, Coursenumber);
            }
        }
        if (BestProperty.equals("Suruna")){
            if (NulpList.contains(Studentnumber)){
                Expectedgrade=calculateExpectedGrade(NulpList,Studentnumber,current_grades,Coursenumber);
            }
            if (DootList.contains(Studentnumber)){
                Expectedgrade=calculateExpectedGrade(DootList,Studentnumber,current_grades,Coursenumber);
            }
            if (LobiList.contains(Studentnumber)){
                Expectedgrade=calculateExpectedGrade(LobiList,Studentnumber,current_grades,Coursenumber);
            }
        }
        if (BestProperty.equals("Lal")){
            if (Lal1List.contains(Studentnumber)){
                Expectedgrade=calculateExpectedGrade(Lal1List,Studentnumber,current_grades,Coursenumber);
            }
            if (Lal2List.contains(Studentnumber)){
                Expectedgrade=calculateExpectedGrade(Lal2List,Studentnumber,current_grades,Coursenumber);
            }
            if (Lal3List.contains(Studentnumber)){
                Expectedgrade=calculateExpectedGrade(Lal3List,Studentnumber,current_grades,Coursenumber);
            }
            if (Lal4List.contains(Studentnumber)){
                Expectedgrade=calculateExpectedGrade(Lal4List,Studentnumber,current_grades,Coursenumber);
            }

        }
        if (BestProperty.equals("Volta")){
            if (Stars5List.contains(Studentnumber)){
                Expectedgrade=calculateExpectedGrade(Stars5List,Studentnumber,current_grades,Coursenumber);

            }
            if (Stars4List.contains(Studentnumber)){
                Expectedgrade=calculateExpectedGrade(Stars4List,Studentnumber,current_grades,Coursenumber);
            }
            if (Stars3List.contains(Studentnumber)){
                Expectedgrade=calculateExpectedGrade(Stars3List,Studentnumber,current_grades,Coursenumber);
            }
            if (Stars2List.contains(Studentnumber)){
                Expectedgrade=calculateExpectedGrade(Stars2List,Studentnumber,current_grades,Coursenumber);
            }
            if (Stars1List.contains(Studentnumber)){
                Expectedgrade=calculateExpectedGrade(Stars1List,Studentnumber,current_grades,Coursenumber);
            }
        }
        return Expectedgrade;
        // Checks which is the best property and the level the student has on that property in order to get
            // their grade prediction

    }
    public static int CourseNumber(String inputCourse){
        String [] courseArray ={"JTE-234","ATE-003","TGL-013","PPL-239","WDM-974","GHL-823","HLU-200","MON-014","FEA-907","LPG-307","TSO-010","LDE-009","JJP-001","MTE-004","LUU-003","LOE-103","PLO-132","BKO-800","SLE-332","BKO-801","DSE-003","DSE-005","ATE-014","JTW-004","ATE-008","DSE-007","ATE-214","JHF-101","KMO-007","WOT-104"};
        int Coursenumber = -1;
        inputCourse.toUpperCase();
        for (int i= 0;i<=courseArray.length;i++){
            if (inputCourse.equals(courseArray[i])){
                Coursenumber = i;
            }
        }
        if (Coursenumber==-1){
            System.out.println("wrong input");
        }
        return Coursenumber;
        //This method is used to store the course that is wished to be used during prediction as an int in order to
        //acces the column of grades that it belongs to
    }
    public static double calculateExpectedGrade(ArrayList<Integer> studentNumbers, int studentNumber, double[][] currentGrades, int courseNumber) {
        if (studentNumbers.contains(studentNumber)) {
            int tempSum = 0;
            int instance = 0;

            for (int i = 0; i < currentGrades.length; i++) {
                if (i == courseNumber) {
                    for (int j = 0; j < currentGrades[i].length; j++) {
                        if (studentNumbers.contains(j)) {
                            tempSum += currentGrades[i][j];
                            instance++;
                        }
                    }
                }
            }

            if (instance > 0) {
                return (double) tempSum / instance;
            }
        }
        return 0.0;
        // Return 0.0 if student number is not found in the list
        // This is the method used to calculate the expected grade and it works by using the Index Array
        // of a property in order to identify the student which number was given at the beginning and predicting
        // their grade based on the average grade of a person with that property.

    }
    // to do Add comments ; Add Input for course; File to array in way that works for strings



}

