import java.io.File;
import java.util.Arrays;
import java.util.Scanner;
import java.util.List;

public class App{

    public static void main(String[] args) {
        //arrays 
        //double[][] graduate_grades = File_To_Array("GraduateGrades.csv");
        //double[][] current_grades = File_To_Array("CurrentGrades.csv");
       

       //use if you have werid bug wiht 0.0's in graduate grades. the error is located in File_To_Array - hasNextDouble
       
        double[][] graduate_grades={
            {8.0, 8.0, 7.0, 8.0, 6.0, 7.0, 9.0, 7.0, 8.0, 6.0, 6.0, 9.0, 10.0, 8.0, 6.0, 10.0, 7.0, 9.0, 10.0, 8.0, 6.0, 8.0, 6.0, 6.0, 6.0, 9.0, 6.0, 6.0, 6.0, 8.0},
            {10.0, 10.0, 10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,}, //cum laudge
            {8.0, 7.0, 9.0, 8.0, 7.0, 9.0, 9.0, 6.0, 7.0, 8.0, 6.0, 7.0, 7.0, 8.0, 6.0, 6.0, 9.0, 6.0, 9.0, 8.0, 10.0, 7.0, 10.0, 10.0, 8.0, 7.0, 9.0, 9.0, 7.0, 7.0},
            {8.0, 10.0, 8.0, 8.0, 7.0, 8.0, 6.0, 7.0, 8.0, 9.0, 7.0, 6.0, 7.0, 8.0, 8.0, 9.0, 9.0, 6.0, 7.0, 7.0, 6.0, 10.0, 7.0, 8.0, 6.0, 6.0, 7.0, 9.0, 6.0, 6.0},
            {6.0, 7.0, 6.0, 6.0, 6.0, 8.0, 10.0, 8.0, 10.0, 9.0, 7.0, 7.0, 7.0, 6.0, 8.0, 8.0, 6.0, 6.0, 6.0, 7.0, 9.0, 8.0, 8.0, 9.0, 8.0, 8.0, 10.0, 6.0, 6.0, 6.0},
            {9.0, 10.0, 6.0, 7.0, 7.0, 6.0, 9.0, 6.0, 8.0, 8.0, 7.0, 7.0, 6.0, 6.0, 9.0, 6.0, 8.0, 6.0, 8.0, 9.0, 8.0, 9.0, 8.0, 7.0, 6.0, 6.0, 8.0, 6.0, 7.0, 8.0},
            {7.0, 8.0, 10.0, 6.0, 7.0, 7.0, 6.0, 6.0, 8.0, 7.0, 6.0, 6.0, 8.0, 7.0, 6.0, 8.0, 8.0, 6.0, 9.0, 6.0, 8.0, 8.0, 7.0, 9.0, 9.0, 8.0, 10.0, 6.0, 7.0, 8.0},
            {8.0, 8.0, 7.0, 7.0, 7.0, 6.0, 8.0, 6.0, 10.0, 9.0, 6.0, 8.0, 7.0, 7.0, 9.0, 6.0, 8.0, 6.0, 6.0, 7.0, 8.0, 10.0, 7.0, 8.0, 7.0, 6.0, 9.0, 6.0, 9.0, 6.0},
            {7.0, 9.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 6.0, 8.0, 8.0, 8.0, 6.0, 7.0, 7.0, 7.0, 8.0, 6.0, 7.0, 9.0, 7.0, 6.0, 8.0, 7.0, 10.0, 7.0, 7.0, 6.0},
            {8.0, 8.0, 8.0, 7.0, 8.0, 7.0, 8.0, 6.0, 7.0, 10.0, 6.0, 7.0, 7.0, 7.0, 9.0, 9.0, 7.0, 6.0, 8.0, 6.0, 10.0, 8.0, 6.0, 6.0, 6.0, 6.0, 10.0, 8.0, 6.0, 6.0},
            {9.0, 8.0, 6.0, 8.0, 6.0, 6.0, 10.0, 7.0, 8.0, 8.0, 7.0, 8.0, 8.0, 9.0, 7.0, 9.0, 9.0, 6.0, 8.0, 6.0, 7.0, 7.0, 6.0, 9.0, 7.0, 6.0, 6.0, 6.0, 9.0, 7.0},
            {8.0, 9.0, 9.0, 7.0, 6.0, 6.0, 8.0, 9.0, 7.0, 7.0, 6.0, 8.0, 10.0, 8.0, 7.0, 10.0, 8.0, 6.0, 6.0, 7.0, 7.0, 9.0, 7.0, 8.0, 7.0, 7.0, 6.0, 6.0, 8.0, 6.0},
            {10.0, 9.0, 7.0, 7.0, 7.0, 6.0, 9.0, 7.0, 8.0, 10.0, 6.0, 6.0, 7.0, 8.0, 9.0, 7.0, 8.0, 6.0, 6.0, 6.0, 9.0, 7.0, 7.0, 7.0, 8.0, 8.0, 9.0, 9.0, 6.0, 6.0},
            {6.0, 7.0, 8.0, 6.0, 6.0, 7.0, 8.0, 6.0, 9.0, 10.0, 6.0, 6.0, 7.0, 6.0, 9.0, 7.0, 6.0, 6.0, 7.0, 8.0, 9.0, 6.0, 7.0, 10.0, 8.0, 8.0, 8.0, 6.0, 6.0, 6.0},
            {7.0, 7.0, 6.0, 7.0, 8.0, 8.0, 6.0, 6.0, 10.0, 8.0, 7.0, 7.0, 7.0, 6.0, 7.0, 9.0, 6.0, 6.0, 8.0, 6.0, 6.0, 10.0, 9.0, 7.0, 6.0, 6.0, 7.0, 7.0, 7.0, 8.0},
            {6.0, 8.0, 6.0, 7.0, 9.0, 7.0, 6.0, 8.0, 7.0, 7.0, 7.0, 6.0, 8.0, 9.0, 6.0, 6.0, 7.0, 6.0, 9.0, 7.0, 10.0, 9.0, 10.0, 9.0, 8.0, 6.0, 9.0, 10.0, 8.0, 6.0},
            {6.0, 9.0, 7.0, 7.0, 8.0, 8.0, 9.0, 6.0, 6.0, 6.0, 7.0, 6.0, 9.0, 6.0, 7.0, 6.0, 10.0, 7.0, 7.0, 6.0, 8.0, 8.0, 6.0, 7.0, 6.0, 7.0, 6.0, 6.0, 7.0, 6.0},
            {9.0, 8.0, 6.0, 6.0, 7.0, 6.0, 8.0, 8.0, 6.0, 7.0, 7.0, 6.0, 6.0, 7.0, 8.0, 8.0, 8.0, 7.0, 10.0, 7.0, 9.0, 8.0, 9.0, 7.0, 6.0, 8.0, 8.0, 6.0, 7.0, 6.0},
            {9.0, 9.0, 6.0, 6.0, 6.0, 6.0, 6.0, 8.0, 9.0, 7.0, 8.0, 9.0, 8.0, 6.0, 7.0, 6.0, 6.0, 6.0, 8.0, 6.0, 9.0, 7.0, 6.0, 8.0, 6.0, 7.0, 7.0, 8.0, 6.0, 6.0},
            {10.0, 8.0, 6.0, 7.0, 8.0, 6.0, 9.0, 10.0, 6.0, 10.0, 8.0, 6.0, 6.0, 8.0, 6.0, 6.0, 6.0, 7.0, 8.0, 9.0, 7.0, 8.0, 7.0, 8.0, 10.0, 7.0, 6.0, 6.0, 10.0, 6.0},
            {6.0, 6.0, 6.0, 8.0, 8.0, 9.0, 8.0, 7.0, 6.0, 10.0, 8.0, 6.0, 9.0, 7.0, 7.0, 6.0, 8.0, 6.0, 6.0, 7.0, 7.0, 9.0, 6.0, 7.0, 6.0, 8.0, 8.0, 9.0, 6.0, 6.0},
            {8.0, 10.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 6.0, 8.0, 9.0, 10.0, 6.0, 8.0, 7.0, 6.0, 8.0, 7.0, 9.0, 6.0, 9.0, 7.0, 6.0, 8.0, 9.0, 7.0, 7.0, 6.0},
            {7.0, 9.0, 7.0, 8.0, 9.0, 6.0, 7.0, 9.0, 6.0, 8.0, 9.0, 7.0, 6.0, 8.0, 7.0, 6.0, 7.0, 9.0, 8.0, 8.0, 10.0, 9.0, 6.0, 9.0, 10.0, 8.0, 8.0, 6.0, 10.0, 7.0},
            {8.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 9.0, 6.0, 6.0, 6.0, 6.0, 10.0, 7.0, 6.0, 6.0, 10.0, 6.0, 7.0, 9.0, 8.0, 6.0, 9.0, 8.0, 7.0, 7.0, 6.0, 6.0, 8.0, 7.0},
            {8.0, 9.0, 8.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 9.0, 6.0, 6.0, 8.0, 8.0, 8.0, 8.0, 7.0, 6.0, 8.0, 7.0, 7.0, 10.0, 6.0, 6.0, 7.0, 6.0, 9.0, 6.0, 6.0, 9.0},
            {7.0, 8.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 9.0, 6.0, 8.0, 9.0, 8.0, 9.0, 8.0, 6.0, 6.0, 8.0, 7.0, 8.0, 7.0, 6.0, 6.0, 6.0, 9.0, 7.0, 7.0, 6.0, 6.0},
            {7.0, 7.0, 6.0, 8.0, 9.0, 8.0, 7.0, 8.0, 6.0, 8.0, 6.0, 6.0, 7.0, 8.0, 6.0, 9.0, 7.0, 6.0, 8.0, 9.0, 6.0, 6.0, 8.0, 8.0, 6.0, 8.0, 9.0, 6.0, 7.0, 6.0},
            {9.0, 8.0, 7.0, 6.0, 7.0, 6.0, 6.0, 8.0, 8.0, 6.0, 6.0, 6.0, 8.0, 7.0, 7.0, 8.0, 9.0, 8.0, 7.0, 8.0, 6.0, 10.0, 10.0, 8.0, 6.0, 8.0, 8.0, 6.0, 8.0, 6.0},
            {7.0, 8.0, 7.0, 6.0, 7.0, 7.0, 6.0, 7.0, 9.0, 8.0, 6.0, 8.0, 10.0, 8.0, 7.0, 6.0, 8.0, 7.0, 8.0, 7.0, 7.0, 9.0, 8.0, 9.0, 6.0, 6.0, 7.0, 6.0, 6.0, 6.0},
            {7.0, 8.0, 7.0, 7.0, 8.0, 8.0, 6.0, 6.0, 6.0, 7.0, 6.0, 7.0, 6.0, 8.0, 8.0, 6.0, 10.0, 8.0, 7.0, 7.0, 6.0, 9.0, 9.0, 6.0, 6.0, 6.0, 7.0, 9.0, 6.0, 8.0},
            {8.0, 8.0, 6.0, 6.0, 8.0, 6.0, 9.0, 7.0, 6.0, 8.0, 7.0, 7.0, 10.0, 6.0, 7.0, 9.0, 7.0, 7.0, 8.0, 7.0, 8.0, 8.0, 7.0, 6.0, 6.0, 7.0, 8.0, 8.0, 8.0, 7.0},
            {7.0, 9.0, 6.0, 6.0, 7.0, 7.0, 7.0, 6.0, 8.0, 7.0, 6.0, 7.0, 8.0, 8.0, 7.0, 8.0, 7.0, 9.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 8.0, 6.0},
            {7.0, 8.0, 8.0, 6.0, 6.0, 7.0, 8.0, 6.0, 7.0, 8.0, 8.0, 6.0, 6.0, 9.0, 8.0, 8.0, 6.0, 6.0, 6.0, 6.0, 8.0, 7.0, 6.0, 9.0, 7.0, 6.0, 10.0, 7.0, 6.0, 6.0},
            {8.0, 10.0, 7.0, 8.0, 7.0, 8.0, 6.0, 6.0, 8.0, 8.0, 7.0, 6.0, 7.0, 8.0, 6.0, 8.0, 6.0, 7.0, 8.0, 9.0, 7.0, 8.0, 6.0, 6.0, 6.0, 8.0, 6.0, 6.0, 8.0, 6.0},
            {7.0, 9.0, 6.0, 9.0, 6.0, 6.0, 6.0, 7.0, 10.0, 6.0, 6.0, 6.0, 6.0, 8.0, 9.0, 8.0, 6.0, 7.0, 7.0, 6.0, 7.0, 7.0, 7.0, 9.0, 7.0, 8.0, 6.0, 6.0, 7.0, 6.0},
            {8.0, 6.0, 7.0, 7.0, 7.0, 8.0, 7.0, 6.0, 9.0, 7.0, 6.0, 7.0, 10.0, 7.0, 6.0, 8.0, 9.0, 8.0, 9.0, 6.0, 7.0, 9.0, 6.0, 10.0, 6.0, 7.0, 9.0, 7.0, 7.0, 8.0},
            {6.0, 10.0, 7.0, 6.0, 9.0, 6.0, 7.0, 7.0, 7.0, 10.0, 7.0, 7.0, 7.0, 6.0, 7.0, 9.0, 7.0, 6.0, 8.0, 10.0, 9.0, 8.0, 9.0, 6.0, 6.0, 10.0, 8.0, 6.0, 6.0, 8.0},
            {6.0, 10.0, 6.0, 7.0, 7.0, 7.0, 8.0, 9.0, 6.0, 10.0, 7.0, 8.0, 9.0, 8.0, 7.0, 10.0, 6.0, 6.0, 8.0, 7.0, 10.0, 10.0, 7.0, 6.0, 6.0, 6.0, 7.0, 6.0, 8.0, 7.0},
            {8.0, 10.0, 6.0, 6.0, 7.0, 8.0, 6.0, 9.0, 7.0, 6.0, 6.0, 8.0, 9.0, 6.0, 6.0, 6.0, 8.0, 6.0, 8.0, 9.0, 7.0, 6.0, 8.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0},
            {6.0, 10.0, 7.0, 7.0, 7.0, 9.0, 6.0, 6.0, 7.0, 6.0, 6.0, 6.0, 10.0, 6.0, 6.0, 7.0, 6.0, 8.0, 8.0, 6.0, 9.0, 8.0, 7.0, 6.0, 6.0, 6.0, 9.0, 6.0, 8.0, 10.0},
            {8.0, 10.0, 6.0, 8.0, 7.0, 7.0, 7.0, 6.0, 8.0, 10.0, 6.0, 6.0, 7.0, 6.0, 9.0, 6.0, 8.0, 9.0, 7.0, 6.0, 8.0, 7.0, 10.0, 8.0, 6.0, 8.0, 9.0, 7.0, 7.0, 6.0},
            {9.0, 8.0, 6.0, 9.0, 7.0, 6.0, 8.0, 9.0, 9.0, 6.0, 6.0, 7.0, 8.0, 8.0, 8.0, 6.0, 7.0, 6.0, 7.0, 7.0, 8.0, 7.0, 7.0, 7.0, 7.0, 8.0, 10.0, 6.0, 10.0, 6.0},
            {9.0, 10.0, 6.0, 9.0, 8.0, 6.0, 8.0, 6.0, 7.0, 9.0, 7.0, 7.0, 8.0, 6.0, 7.0, 6.0, 7.0, 8.0, 6.0, 9.0, 9.0, 7.0, 6.0, 8.0, 6.0, 9.0, 6.0, 10.0, 7.0, 7.0},
            {6.0, 10.0, 9.0, 9.0, 8.0, 7.0, 6.0, 7.0, 7.0, 8.0, 8.0, 6.0, 8.0, 6.0, 7.0, 9.0, 8.0, 8.0, 6.0, 7.0, 6.0, 9.0, 6.0, 7.0, 6.0, 8.0, 7.0, 6.0, 8.0, 6.0},
            {6.0, 8.0, 6.0, 7.0, 8.0, 8.0, 6.0, 6.0, 9.0, 7.0, 7.0, 6.0, 7.0, 7.0, 7.0, 10.0, 7.0, 7.0, 8.0, 6.0, 6.0, 6.0, 6.0, 7.0, 6.0, 7.0, 9.0, 6.0, 7.0, 6.0},
            {10.0, 10.0, 7.0, 6.0, 6.0, 7.0, 8.0, 10.0, 8.0, 7.0, 6.0, 6.0, 9.0, 8.0, 6.0, 10.0, 6.0, 7.0, 6.0, 9.0, 6.0, 8.0, 7.0, 8.0, 8.0, 6.0, 7.0, 6.0, 8.0, 6.0},
            {9.0, 6.0, 7.0, 6.0, 6.0, 6.0, 8.0, 10.0, 6.0, 7.0, 6.0, 7.0, 9.0, 6.0, 6.0, 9.0, 8.0, 7.0, 8.0, 7.0, 7.0, 9.0, 9.0, 7.0, 6.0, 6.0, 8.0, 6.0, 8.0, 6.0},
            {6.0, 10.0, 8.0, 7.0, 9.0, 7.0, 6.0, 7.0, 8.0, 8.0, 9.0, 6.0, 6.0, 8.0, 6.0, 7.0, 6.0, 6.0, 9.0, 6.0, 8.0, 7.0, 7.0, 6.0, 6.0, 6.0, 10.0, 6.0, 6.0, 9.0},
            {6.0, 10.0, 6.0, 9.0, 8.0, 6.0, 7.0, 10.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 8.0, 6.0, 8.0, 6.0, 9.0, 10.0, 7.0, 9.0, 6.0, 10.0, 6.0, 6.0, 7.0, 8.0},
            {7.0, 6.0, 6.0, 6.0, 7.0, 8.0, 8.0, 6.0, 6.0, 10.0, 6.0, 6.0, 10.0, 7.0, 7.0, 6.0, 10.0, 6.0, 8.0, 6.0, 8.0, 6.0, 8.0, 7.0, 8.0, 8.0, 9.0, 6.0, 8.0, 6.0},
            {6.0, 8.0, 10.0, 7.0, 8.0, 6.0, 10.0, 10.0, 6.0, 7.0, 6.0, 7.0, 6.0, 8.0, 7.0, 6.0, 9.0, 6.0, 9.0, 6.0, 7.0, 10.0, 7.0, 10.0, 8.0, 8.0, 8.0, 7.0, 8.0, 6.0},
            {9.0, 10.0, 8.0, 9.0, 7.0, 6.0, 6.0, 6.0, 9.0, 7.0, 6.0, 7.0, 8.0, 10.0, 6.0, 8.0, 6.0, 8.0, 7.0, 6.0, 9.0, 7.0, 6.0, 10.0, 6.0, 9.0, 9.0, 6.0, 9.0, 7.0},
            {6.0, 9.0, 6.0, 7.0, 8.0, 6.0, 8.0, 6.0, 8.0, 6.0, 6.0, 8.0, 7.0, 7.0, 8.0, 7.0, 9.0, 8.0, 7.0, 6.0, 8.0, 9.0, 7.0, 8.0, 6.0, 8.0, 9.0, 7.0, 6.0, 6.0},
            {7.0, 9.0, 6.0, 6.0, 6.0, 6.0, 9.0, 6.0, 9.0, 6.0, 8.0, 6.0, 9.0, 7.0, 7.0, 6.0, 9.0, 6.0, 9.0, 9.0, 10.0, 9.0, 8.0, 9.0, 6.0, 8.0, 6.0, 8.0, 6.0, 8.0},
            {8.0, 10.0, 7.0, 8.0, 6.0, 8.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 8.0, 6.0, 8.0, 6.0, 6.0, 7.0, 7.0, 6.0, 8.0, 10.0, 8.0, 7.0, 6.0, 6.0, 7.0, 8.0, 6.0, 7.0},
            {6.0, 8.0, 6.0, 8.0, 6.0, 6.0, 7.0, 8.0, 7.0, 7.0, 6.0, 6.0, 8.0, 8.0, 6.0, 9.0, 10.0, 7.0, 8.0, 6.0, 7.0, 7.0, 6.0, 7.0, 6.0, 9.0, 6.0, 6.0, 8.0, 6.0},
            {6.0, 7.0, 6.0, 9.0, 9.0, 7.0, 7.0, 7.0, 8.0, 8.0, 8.0, 7.0, 8.0, 6.0, 10.0, 7.0, 7.0, 7.0, 8.0, 10.0, 8.0, 10.0, 10.0, 8.0, 7.0, 6.0, 6.0, 6.0, 9.0, 6.0},
            {8.0, 8.0, 8.0, 7.0, 7.0, 6.0, 7.0, 6.0, 9.0, 7.0, 6.0, 6.0, 8.0, 9.0, 7.0, 7.0, 8.0, 6.0, 8.0, 6.0, 9.0, 6.0, 7.0, 6.0, 6.0, 7.0, 6.0, 7.0, 8.0, 7.0},
            {9.0, 9.0, 6.0, 6.0, 7.0, 6.0, 7.0, 7.0, 10.0, 7.0, 10.0, 7.0, 8.0, 7.0, 6.0, 10.0, 6.0, 6.0, 8.0, 7.0, 7.0, 9.0, 7.0, 7.0, 6.0, 8.0, 8.0, 6.0, 6.0, 6.0},
            {7.0, 8.0, 6.0, 8.0, 8.0, 7.0, 6.0, 7.0, 7.0, 8.0, 8.0, 7.0, 6.0, 7.0, 8.0, 7.0, 6.0, 7.0, 9.0, 7.0, 6.0, 8.0, 9.0, 9.0, 6.0, 8.0, 10.0, 7.0, 7.0, 6.0},
            {7.0, 9.0, 8.0, 7.0, 7.0, 7.0, 6.0, 8.0, 6.0, 6.0, 6.0, 7.0, 9.0, 7.0, 7.0, 6.0, 8.0, 7.0, 8.0, 6.0, 6.0, 7.0, 6.0, 8.0, 8.0, 7.0, 6.0, 6.0, 9.0, 10.0},
            {9.0, 7.0, 8.0, 7.0, 7.0, 8.0, 8.0, 8.0, 10.0, 10.0, 6.0, 6.0, 10.0, 7.0, 7.0, 8.0, 7.0, 7.0, 9.0, 6.0, 8.0, 8.0, 7.0, 9.0, 6.0, 7.0, 7.0, 6.0, 6.0, 6.0},
            {8.0, 10.0, 8.0, 8.0, 7.0, 6.0, 7.0, 8.0, 7.0, 7.0, 6.0, 10.0, 7.0, 7.0, 10.0, 7.0, 6.0, 8.0, 7.0, 6.0, 8.0, 8.0, 7.0, 9.0, 6.0, 6.0, 9.0, 6.0, 9.0, 7.0},
            {8.0, 6.0, 8.0, 6.0, 9.0, 7.0, 10.0, 7.0, 8.0, 8.0, 7.0, 6.0, 7.0, 8.0, 7.0, 6.0, 10.0, 6.0, 8.0, 9.0, 6.0, 9.0, 6.0, 7.0, 6.0, 6.0, 9.0, 7.0, 6.0, 7.0},
            {8.0, 7.0, 6.0, 10.0, 6.0, 6.0, 7.0, 6.0, 6.0, 8.0, 6.0, 7.0, 8.0, 10.0, 8.0, 6.0, 10.0, 6.0, 7.0, 6.0, 10.0, 6.0, 9.0, 8.0, 8.0, 8.0, 6.0, 9.0, 7.0, 7.0},
            {7.0, 8.0, 6.0, 9.0, 7.0, 6.0, 6.0, 9.0, 9.0, 6.0, 6.0, 6.0, 8.0, 9.0, 7.0, 8.0, 8.0, 6.0, 6.0, 6.0, 8.0, 6.0, 9.0, 8.0, 7.0, 7.0, 8.0, 8.0, 6.0, 9.0},
            {8.0, 7.0, 7.0, 9.0, 7.0, 6.0, 7.0, 6.0, 10.0, 6.0, 6.0, 6.0, 9.0, 7.0, 6.0, 7.0, 6.0, 8.0, 8.0, 6.0, 6.0, 7.0, 8.0, 6.0, 6.0, 7.0, 7.0, 6.0, 6.0, 9.0},
            {8.0, 9.0, 7.0, 8.0, 8.0, 6.0, 10.0, 8.0, 8.0, 8.0, 7.0, 6.0, 7.0, 7.0, 8.0, 8.0, 8.0, 9.0, 6.0, 10.0, 6.0, 10.0, 6.0, 10.0, 6.0, 7.0, 8.0, 7.0, 8.0, 6.0},
            {6.0, 8.0, 8.0, 6.0, 6.0, 6.0, 9.0, 7.0, 6.0, 10.0, 6.0, 8.0, 8.0, 7.0, 9.0, 9.0, 6.0, 7.0, 6.0, 6.0, 10.0, 7.0, 6.0, 8.0, 6.0, 9.0, 8.0, 6.0, 7.0, 6.0},
            {10.0, 10.0, 6.0, 8.0, 9.0, 6.0, 7.0, 7.0, 8.0, 8.0, 7.0, 7.0, 7.0, 6.0, 8.0, 9.0, 10.0, 6.0, 8.0, 7.0, 9.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 6.0, 6.0, 6.0},
            {6.0, 10.0, 6.0, 7.0, 7.0, 10.0, 8.0, 7.0, 10.0, 9.0, 6.0, 7.0, 6.0, 9.0, 8.0, 7.0, 7.0, 6.0, 7.0, 8.0, 6.0, 6.0, 8.0, 8.0, 8.0, 8.0, 9.0, 6.0, 6.0, 6.0},
            {8.0, 10.0, 6.0, 7.0, 8.0, 8.0, 8.0, 7.0, 7.0, 8.0, 6.0, 6.0, 9.0, 7.0, 7.0, 6.0, 6.0, 9.0, 8.0, 7.0, 8.0, 6.0, 6.0, 7.0, 9.0, 6.0, 10.0, 7.0, 7.0, 6.0},
            {10.0, 7.0, 6.0, 7.0, 6.0, 10.0, 7.0, 8.0, 6.0, 8.0, 8.0, 7.0, 8.0, 8.0, 7.0, 7.0, 9.0, 6.0, 6.0, 9.0, 6.0, 8.0, 6.0, 7.0, 7.0, 8.0, 6.0, 7.0, 7.0, 7.0},
            {6.0, 6.0, 8.0, 6.0, 6.0, 6.0, 7.0, 7.0, 9.0, 10.0, 6.0, 6.0, 8.0, 7.0, 8.0, 8.0, 6.0, 8.0, 8.0, 9.0, 7.0, 10.0, 7.0, 8.0, 7.0, 7.0, 10.0, 7.0, 8.0, 8.0},
            {8.0, 7.0, 7.0, 6.0, 8.0, 7.0, 7.0, 8.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 9.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 6.0, 7.0, 8.0, 6.0, 7.0, 9.0, 6.0, 8.0, 7.0},
            {8.0, 8.0, 6.0, 8.0, 7.0, 7.0, 7.0, 6.0, 9.0, 6.0, 6.0, 7.0, 6.0, 6.0, 10.0, 8.0, 8.0, 6.0, 9.0, 6.0, 8.0, 6.0, 9.0, 7.0, 6.0, 6.0, 9.0, 6.0, 10.0, 6.0},
            {8.0, 6.0, 9.0, 8.0, 6.0, 8.0, 6.0, 7.0, 8.0, 8.0, 6.0, 6.0, 6.0, 7.0, 6.0, 7.0, 10.0, 8.0, 10.0, 6.0, 9.0, 8.0, 9.0, 10.0, 6.0, 7.0, 6.0, 7.0, 10.0, 6.0},
            {6.0, 9.0, 6.0, 7.0, 6.0, 6.0, 7.0, 7.0, 8.0, 8.0, 6.0, 9.0, 7.0, 8.0, 10.0, 8.0, 9.0, 8.0, 6.0, 6.0, 8.0, 8.0, 6.0, 8.0, 7.0, 9.0, 7.0, 7.0, 8.0, 9.0},
            {7.0, 6.0, 7.0, 7.0, 6.0, 6.0, 8.0, 8.0, 7.0, 8.0, 6.0, 7.0, 7.0, 9.0, 7.0, 7.0, 10.0, 7.0, 7.0, 6.0, 8.0, 8.0, 6.0, 9.0, 9.0, 7.0, 7.0, 6.0, 7.0, 6.0},
            {8.0, 7.0, 6.0, 6.0, 9.0, 6.0, 8.0, 6.0, 7.0, 8.0, 6.0, 6.0, 9.0, 8.0, 6.0, 6.0, 9.0, 6.0, 7.0, 8.0, 6.0, 10.0, 8.0, 8.0, 8.0, 8.0, 8.0, 7.0, 9.0, 6.0},
            {8.0, 7.0, 7.0, 8.0, 7.0, 9.0, 7.0, 6.0, 7.0, 6.0, 6.0, 6.0, 9.0, 7.0, 6.0, 6.0, 10.0, 7.0, 9.0, 8.0, 8.0, 7.0, 6.0, 8.0, 6.0, 8.0, 8.0, 6.0, 8.0, 7.0},
            {6.0, 8.0, 6.0, 8.0, 6.0, 6.0, 6.0, 10.0, 7.0, 8.0, 6.0, 8.0, 6.0, 8.0, 8.0, 8.0, 6.0, 7.0, 8.0, 7.0, 9.0, 6.0, 6.0, 7.0, 8.0, 7.0, 7.0, 8.0, 6.0, 7.0},
            {6.0, 6.0, 6.0, 6.0, 7.0, 6.0, 9.0, 8.0, 6.0, 7.0, 7.0, 7.0, 8.0, 6.0, 9.0, 7.0, 7.0, 7.0, 7.0, 6.0, 9.0, 10.0, 8.0, 6.0, 7.0, 8.0, 8.0, 7.0, 7.0, 8.0},
            {7.0, 10.0, 6.0, 8.0, 6.0, 7.0, 7.0, 6.0, 9.0, 6.0, 6.0, 10.0, 9.0, 7.0, 7.0, 6.0, 6.0, 10.0, 6.0, 6.0, 8.0, 8.0, 8.0, 6.0, 6.0, 8.0, 10.0, 7.0, 6.0, 7.0},
            {6.0, 10.0, 6.0, 7.0, 6.0, 8.0, 9.0, 7.0, 9.0, 6.0, 6.0, 7.0, 6.0, 6.0, 7.0, 9.0, 9.0, 8.0, 8.0, 8.0, 6.0, 9.0, 7.0, 9.0, 6.0, 7.0, 8.0, 8.0, 7.0, 6.0},
            {6.0, 9.0, 6.0, 8.0, 6.0, 7.0, 7.0, 6.0, 8.0, 8.0, 6.0, 6.0, 7.0, 7.0, 7.0, 8.0, 7.0, 6.0, 7.0, 6.0, 7.0, 10.0, 7.0, 6.0, 8.0, 7.0, 10.0, 8.0, 10.0, 8.0},
            {6.0, 7.0, 8.0, 6.0, 6.0, 8.0, 9.0, 7.0, 7.0, 6.0, 6.0, 7.0, 7.0, 8.0, 7.0, 10.0, 7.0, 6.0, 7.0, 7.0, 6.0, 7.0, 6.0, 6.0, 6.0, 8.0, 8.0, 7.0, 8.0, 7.0},
            {8.0, 8.0, 10.0, 9.0, 6.0, 6.0, 6.0, 6.0, 9.0, 10.0, 6.0, 6.0, 6.0, 6.0, 8.0, 9.0, 7.0, 6.0, 8.0, 7.0, 7.0, 8.0, 6.0, 7.0, 6.0, 6.0, 8.0, 7.0, 10.0, 6.0},
            {8.0, 9.0, 9.0, 8.0, 7.0, 7.0, 6.0, 7.0, 6.0, 9.0, 6.0, 7.0, 9.0, 7.0, 7.0, 6.0, 10.0, 6.0, 6.0, 8.0, 6.0, 7.0, 6.0, 9.0, 6.0, 7.0, 10.0, 6.0, 7.0, 7.0},
            {7.0, 8.0, 6.0, 8.0, 7.0, 6.0, 8.0, 10.0, 6.0, 6.0, 6.0, 9.0, 7.0, 6.0, 8.0, 8.0, 8.0, 6.0, 7.0, 8.0, 8.0, 8.0, 6.0, 7.0, 7.0, 7.0, 8.0, 8.0, 6.0, 7.0},
            {8.0, 7.0, 6.0, 6.0, 8.0, 6.0, 9.0, 6.0, 7.0, 7.0, 6.0, 8.0, 8.0, 8.0, 7.0, 7.0, 6.0, 7.0, 6.0, 8.0, 7.0, 10.0, 8.0, 8.0, 6.0, 7.0, 7.0, 9.0, 7.0, 8.0},
            {7.0, 7.0, 6.0, 9.0, 6.0, 6.0, 8.0, 10.0, 7.0, 9.0, 6.0, 6.0, 9.0, 10.0, 6.0, 6.0, 7.0, 7.0, 7.0, 9.0, 6.0, 8.0, 10.0, 9.0, 6.0, 9.0, 8.0, 7.0, 6.0, 8.0},
            {10.0, 10.0, 8.0, 6.0, 10.0, 7.0, 6.0, 7.0, 7.0, 6.0, 8.0, 6.0, 8.0, 9.0, 6.0, 8.0, 9.0, 7.0, 6.0, 9.0, 6.0, 7.0, 6.0, 8.0, 8.0, 10.0, 8.0, 6.0, 6.0, 6.0},
            {10.0, 6.0, 8.0, 6.0, 7.0, 6.0, 6.0, 6.0, 9.0, 6.0, 6.0, 8.0, 6.0, 7.0, 8.0, 10.0, 8.0, 7.0, 6.0, 8.0, 7.0, 9.0, 7.0, 8.0, 9.0, 8.0, 7.0, 8.0, 6.0, 6.0},
            {8.0, 10.0, 6.0, 7.0, 6.0, 7.0, 9.0, 8.0, 6.0, 8.0, 7.0, 6.0, 7.0, 7.0, 7.0, 7.0, 10.0, 6.0, 7.0, 7.0, 8.0, 9.0, 7.0, 8.0, 8.0, 9.0, 8.0, 7.0, 10.0, 6.0},
            {6.0, 9.0, 6.0, 8.0, 6.0, 8.0, 8.0, 8.0, 7.0, 9.0, 9.0, 7.0, 8.0, 7.0, 6.0, 10.0, 7.0, 7.0, 9.0, 6.0, 6.0, 10.0, 6.0, 9.0, 6.0, 8.0, 7.0, 7.0, 6.0, 6.0},
            {7.0, 6.0, 10.0, 6.0, 8.0, 6.0, 8.0, 8.0, 7.0, 7.0, 7.0, 6.0, 10.0, 7.0, 7.0, 7.0, 6.0, 7.0, 9.0, 6.0, 6.0, 6.0, 8.0, 7.0, 6.0, 8.0, 10.0, 7.0, 8.0, 6.0},
            {9.0, 10.0, 10.0, 6.0, 8.0, 6.0, 9.0, 7.0, 7.0, 7.0, 6.0, 7.0, 6.0, 6.0, 7.0, 6.0, 8.0, 7.0, 8.0, 10.0, 7.0, 10.0, 8.0, 8.0, 8.0, 10.0, 9.0, 8.0, 6.0, 8.0},
            {6.0, 6.0, 6.0, 9.0, 6.0, 6.0, 8.0, 10.0, 9.0, 7.0, 8.0, 8.0, 10.0, 7.0, 6.0, 9.0, 7.0, 6.0, 10.0, 7.0, 8.0, 8.0, 6.0, 6.0, 6.0, 7.0, 9.0, 6.0, 6.0, 6.0},
            {6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 10.0, 8.0, 7.0, 8.0, 6.0, 6.0, 8.0, 7.0, 7.0, 6.0, 10.0, 8.0, 7.0, 9.0, 6.0, 6.0, 9.0, 6.0, 6.0, 6.0, 10.0, 6.0, 7.0, 6.0},
};

        double[][] current_grades={
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 8.0, -1.0, 8.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 7.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 5.0, -1.0, 7.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 6.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 5.0, -1.0, 5.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 5.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 5.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 5.0, -1.0, 5.0, -1.0, 5.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 5.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 5.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 10.0, -1.0, 8.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 8.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 6.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 7.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 8.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 9.0, -1.0, 7.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 8.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 5.0, -1.0, 5.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 4.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 6.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 9.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 9.0, -1.0, 9.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 9.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 6.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 6.0, -1.0, 5.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 5.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 6.0, -1.0, 5.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 5.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 8.0, -1.0, 8.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 10.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 7.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 8.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 9.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 8.0, -1.0, 8.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 10.0, 10.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 6.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 5.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 5.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 5.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 5.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 6.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 9.0, -1.0, 7.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 8.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 8.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 7.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 5.0, -1.0, 8.0, -1.0, 5.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 8.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 7.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 8.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 9.0, -1.0, 8.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 5.0, -1.0, 5.0, -1.0, 6.0, -1.0, -1.0, 4.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 6.0, -1.0, 5.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 5.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 6.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 8.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 5.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 5.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 6.0, -1.0, 5.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 6.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 6.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 6.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 6.0, -1.0, 5.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 5.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 5.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 5.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 7.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 8.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 7.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 7.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 5.0, -1.0, 6.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 6.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 5.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 6.0, 5.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 8.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 7.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 9.0, -1.0, 8.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 9.0, 10.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 8.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 7.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 8.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 8.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 8.0, -1.0, 7.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 8.0, -1.0, 7.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 8.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 8.0, -1.0, 8.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 5.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 5.0, -1.0, 5.0, -1.0, -1.0, 4.0, -1.0, -1.0, -1.0, -1.0, 6.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 9.0, -1.0, 9.0, -1.0, -1.0, 10.0, -1.0, -1.0, -1.0, -1.0, 9.0, 10.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 9.0, -1.0, 7.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 8.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 7.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 7.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 9.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 7.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 8.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 9.0, -1.0, 7.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 8.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 8.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 8.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 10.0, -1.0, 9.0, -1.0, 9.0, -1.0, -1.0, 10.0, -1.0, -1.0, -1.0, -1.0, 8.0, 10.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 8.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 9.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 6.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 7.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},            

        }; 
        
        // commented for possible use

        //MMS_Student  HERE PUT A DESIRED STUDENT ID
        
                // int studentID = 2; // Replace with the student ID you want to calculate statistics for
        
                // double[] studentStatistics = MMS_Student(graduate_grades, studentID);
        
                // System.out.println("Statistics for Student ID " + studentID + ": ");
                // System.out.println("Mean: " + studentStatistics[0]);
                // System.out.println("Median: " + studentStatistics[1]);
                // System.out.println("Standard Deviation: " + studentStatistics[2]);

                // // Common stats 
                // // Here specify which students to include in comparison!!
                // int[] selectedStudentIDs = {3,4,5}; 

                // double[] commonStatistics = common_MMS(graduate_grades, selectedStudentIDs);

                // System.out.println("\n");

                // System.out.println("Common Statistics for Selected Students: " + Arrays.toString(selectedStudentIDs));
                // System.out.println("Mean: " + commonStatistics[0]);
                // System.out.println("Median: " + commonStatistics[1]);
                // System.out.println("Standard Deviation: " + commonStatistics[2]);

                // System.out.println("\n");

    
                
        int number_of_courses = graduate_grades[0].length;

        int[] cl_student_id = Cum_Laude_Graduates(graduate_grades);
        
       // System.out.println(Arrays.deepToString(Similarity_Array(graduate_grades, number_of_courses)));
        //System.out.println(Arrays.deepToString(Similarity_Array(current_grades, number_of_courses)));
        /* 
        //only used for printing the arrays  (id's are not not the ones from csv for currentGrades);
        System.out.println("number of courses: "+number_of_courses);
        System.out.println("graduate_grades for id's: \n");
        for(int i=0; i<graduate_grades.length; i++){
            if(graduate_grades[i] == null){continue;}
            System.out.println(i+": "+Arrays.toString(graduate_grades[i]));
		}
        System.out.println("\n\n" + "graduate_grades for id's: \n");
        for(int i=0; i<current_grades.length; i++){
            if(current_grades[i] == null){continue;}
            System.out.println(i+" "+Arrays.toString(current_grades[i]));
		}
        System.out.println("\n\n");
        System.out.println("Cum Laudge student's id:\n" +Arrays.toString(cl_student_id));
    */
     /* 
    //TESTING UNIT  
    double[] test_arr1={9,8,7,3,4,2};
    double[] test_arr2={1,2,3,2,5,53,4};
    double[] test_arr3={-33,-5,3,22,44,5};

    Sort_With_Id(test_arr1,true); 
    Sort_With_Id(test_arr2,true); 
    Sort_With_Id(test_arr3,true); 
    */
      
    // answers  step 1
    System.out.println("Five hardest courses average grade: " + Arrays.toString(hardest_courses(graduate_grades)));
    System.out.println("Five easiest courses average grade: " + Arrays.toString(easiest_courses(graduate_grades)));
    System.out.println("Number of students with Cum Ludge: "+cl_student_id.length);
    System.out.println("Their ID's : "+Arrays.toString(cl_student_id));
    System.out.println("Most similar courses: ");
    Comparing_Courses(Similarity_Array(graduate_grades, number_of_courses),graduate_grades,number_of_courses);
      double[][] transposedArray = TransposeCurrentGradesArray(graduate_grades);
    relatedCourses(transposedArray);
    CorrelationMatrix(transposedArray);
    }

    public static double[][] File_To_Array(String fileName){
        try {
            double[][] studentGradesArray = new double[0][]; 
            File file=new File(fileName);
            Scanner fileScanner = new Scanner(file);

            int numOfCourses = 30;
            int studentID = -1; //small value to initialize
            int arrayLength=-1; //small value to initialize

            int linesDone = 0;
            while (fileScanner.hasNextLine() && linesDone <= 5) {
            	String line = fileScanner.nextLine();
            	linesDone++;
                int courseIndex = 0;    //keeps track of the course

            	// and one that scans the line entry per entry using the commas as delimiters
            	Scanner lineScanner = new Scanner(line);
                lineScanner.useDelimiter(",");
            	while (lineScanner.hasNext()) {
            		if (lineScanner.hasNextInt()) {
            			studentID = lineScanner.nextInt();

                        //If the index (indicated by studentID) is larger than the length of the array:
                        //  create a larger array with length studentID+1
                        if(arrayLength<studentID){
                            arrayLength = studentID;
                            studentGradesArray = Arrays.copyOf(studentGradesArray, studentID+1);
                        }
                        //initialises only the studentID's we need to save resources
                        studentGradesArray[studentID] = new double[numOfCourses];

            		} else if (lineScanner.hasNextDouble()) {
            			double d = lineScanner.nextDouble();
                        studentGradesArray[studentID][courseIndex]=d;
                        courseIndex++;
            		} else {
            			String s = lineScanner.next();
                        if(s.equals("NG")){
                            studentGradesArray[studentID][courseIndex]=-1;
                        }
                        courseIndex++;
            		}
            	}
            	lineScanner.close();
            }
            fileScanner.close();
            //prints the grades array per row with student index

            return studentGradesArray;
            
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }

    //reads a csv file with strings and converts it into a 2d array of type String
     public static String[][] File_To_Array_String(String fileName){
        try {
            File file=new File(fileName);
            Scanner fileScanner = new Scanner(file);

            //added
            String[][] student_info = new String[0][];
            int length = 0;

            int linesDone = 0;
            while (fileScanner.hasNextLine()) {
            	String line = fileScanner.nextLine();
            	linesDone++;
                
                //added code
                if(linesDone==1){
                    continue;
                }
                List<String> propertyList = new ArrayList<String>();
                int studentID = -1;

            	// and one that scans the line entry per entry using the commas as delimiters
            	Scanner lineScanner = new Scanner(line);
                lineScanner.useDelimiter(",");
            	while (lineScanner.hasNext()) {
            		if (lineScanner.hasNextInt() && studentID==-1) {
            			studentID = lineScanner.nextInt();
            		} else {
            			String s = lineScanner.next();
                        propertyList.add(s);
            		}
            	}
                //append propertylist to array
                String[] property = propertyList.toArray(new String[0]);

                if(studentID>=length){
                    length= studentID+1;
                }
                student_info = Arrays.copyOf(student_info, length);
                student_info[studentID] = property;
            	lineScanner.close();
            }
            fileScanner.close();
            //prints the grades array per row with student index

            return student_info;
            
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }




     /*
     * 
     * STEP 1
     *  - calculatating: mean median spread of grades for Students/Courses
     *  - creating list of honored students Cum Laude
     *  - findind similiarities between courses
     * 
     */


    /**calculates the mean, median and spread for a course with support for missing values
    * @param students_grades: a 2D-array containing studentID and grades
    * @param course: index of the grade corresponding to the course for a student
    * @return double array: containing {mean, median, spread}
    */
    public static double[] MMS_Course(double[][] students_grades, int course){
        double[] mms = {-1.0, -1.0, -1.0};
        int numOfstudents = 0;
        double[] courseGrades = new double[0];

        for (double[] student : students_grades) {
            if(student==null||student[course]==-1){continue;}
            numOfstudents++;
            courseGrades = Arrays.copyOf(courseGrades, numOfstudents);
            courseGrades[courseGrades.length-1] = student[course];
        }
        Arrays.sort(courseGrades);
        //System.out.println(Arrays.toString(courseGrades));
        if(numOfstudents==0)return mms;

        int len = courseGrades.length;

        //mean
        double sum = 0;
        for (double grade: courseGrades) {
            sum += grade;
        }
        double mean = sum/numOfstudents;
        mms[0] = round(sum/numOfstudents, 2);

        //median
        double median;
        if(len%2==1){ //odd 
            median =  courseGrades[courseGrades.length/2];
        }else{  //even 
            median = (courseGrades[len/2] + courseGrades[len/2-1])/2;
        } 
        mms[1] = round(median, 2);

        // standard deviation
        double deviation = 0;
        for (double grade: courseGrades) {
            deviation += (grade - mean) * (grade - mean);
        }
        deviation = Math.sqrt( (deviation / mean) );

        mms[2] = round(deviation, 2);

        return mms;
    }
    //MMS STUDENT ------------------------------------------------------------------------------------------------------------


    public static double[] MMS_Student(double[][] graduate_grades, int studentID) { 
                // to use this method you need to specify in main method for which student you would like to print MMS_Student for
                            
                int amountOfCourses = graduate_grades[studentID].length; // Determine the number of courses for the specified student
                double[] mmsForStudent = new double[3];
                    
                // Create an array to store the grades of the specified student
                double[] studentGrades = new double[amountOfCourses];
                            
                // Copy the student's grades
                for (int j = 0; j < amountOfCourses; j++) {
                    studentGrades[j] = graduate_grades[studentID][j];
                }
                    
                //mean 
                double sum = 0;
                for (double grade : studentGrades) {
                                sum += grade;
                }
                    double mean = sum / amountOfCourses;
                    mmsForStudent[0] = round(mean,2);
                
                //median
                Arrays.sort(studentGrades);
                double median;
                if (amountOfCourses % 2 == 1) { // if a number is odd
                    median = studentGrades[amountOfCourses / 2];
                }
                else { // if a number is even 
                    median = (studentGrades[amountOfCourses / 2 - 1] + studentGrades[amountOfCourses / 2]) / 2;
                }
                mmsForStudent[1] = round(median,2);
                
                //standard deviation
                double deviation = 0;
                for (double grade : studentGrades) {
                    deviation += (grade - mean) * (grade - mean);
                }
                deviation = Math.sqrt(deviation / amountOfCourses);
                mmsForStudent[2] = round(deviation,2 );
                
                double roundedMean = round(mean, 2);
                double roundedDeviation = round(deviation, 2);

                return mmsForStudent;
                        }



/* MMS for common statistics of chosen students - calculates a commos MMS for students*/
    
    public static double[] common_MMS(double[][] graduate_grades, int[] selectedStudentIDs) {
        int numSelectedStudents = selectedStudentIDs.length;
        double[] commonStats = new double[3]; 
        // Count the maximum number of courses among selected students
        int maxCourses = 0;
        for (int studentID : selectedStudentIDs) {
            maxCourses = Math.max(maxCourses, graduate_grades[studentID].length);
        }

        // Create arrays to store the selected students' grades
        double[] selectedGrades = new double[numSelectedStudents * maxCourses];

        // mean - common mean for chosen students 
        double sum = 0;
        int index = 0;

        for (int studentID : selectedStudentIDs) {
            // adjusting a lenght of a row to the studentID to prevent "out of bounds"
            int numCourses = graduate_grades[studentID].length; 
            for (int j = 0; j < numCourses; j++) {
                selectedGrades[index++] = graduate_grades[studentID][j];
                sum += graduate_grades[studentID][j];
            }
        }
        double commonMean = sum / (numSelectedStudents * maxCourses);
        commonStats[0] = round(commonMean, 2); 

        // common median 
        Arrays.sort(selectedGrades);
        double commonMedian;
        if (selectedGrades.length % 2 == 1) {
            commonMedian = selectedGrades[selectedGrades.length / 2];
        } else {
            commonMedian = (selectedGrades[selectedGrades.length / 2 - 1] + selectedGrades[selectedGrades.length / 2]) / 2;
        }
        commonStats[1] = commonMedian; 

        // deviation between values 
        double commonDeviation = 0;
        for (double grade : selectedGrades) {
            commonDeviation += (grade - commonMean) * (grade - commonMean);
        }
        commonDeviation = Math.sqrt(commonDeviation / (numSelectedStudents * maxCourses));
        commonStats[2] = round(commonDeviation,2); 
        
        return commonStats; 
    }


    /** Simple Gpa calculator supporting missing values
     * @param student_grades: array containing only grades/missing grades !no student index!  
     * @return double GPA grade rounded to 2 decimal places
    **/
    public static double Calc_GPA(double[] student_grades ){
        // Gpa is calculated like mean (not considering credits of course)
        double sum=0.0;
        int decimal_places=2;
        for(double grade : student_grades){
            if(grade>=0){
                sum+=grade;
            }
        }
        return round((sum/student_grades.length), 2);
    }
    /** method returning array of Cum Ludge students 
     * @param graduate_grades: no support for missing values  
     * @return integer array
    */
    public static int[] Cum_Laude_Graduates (double[][] graduate_grades ){
        
        int num_of_honors=0;
        // checking number of the honored students
        for(int i=0; i<graduate_grades.length;i++){
            if(Calc_GPA(graduate_grades[i])>=8.00){
                num_of_honors++;
            }
        }
        double[] temp = new double[num_of_honors];
        num_of_honors=0;
        for(int i=0; i<graduate_grades.length;i++){
            System.out.println("graduate grades mean: "+Calc_GPA(graduate_grades[i]));
            if(Calc_GPA(graduate_grades[i])>=8.00){
                System.out.println("honor means: "+Calc_GPA(graduate_grades[i]));
                temp[num_of_honors]=i;
                num_of_honors++;
            }
        }
        int[] honored_students_id = Array_Double_To_Int(Arrays.copyOf(temp, num_of_honors));
        System.out.println(Arrays.toString(honored_students_id));
        return honored_students_id;
    }
    /** finding similarities between courses 
     * @param 
     * @return integer array
    */



  /** used in other method
     * @param courseA first course
     * @param courseB second course
     * @param students_grades: a 2D-array containing studentID and grades
     * @return double from 0-10 to indicate similarity
     */ 
    public static double Course_Similarity(double[][] studentGradesArray, int courseA, int courseB){

        double differenceSum = 0;
        int numOfStudents = 0;
        for(double[] student: studentGradesArray){
            if(student!=null&&student[courseA]!=-1&&student[courseB]!=-1){
                numOfStudents++;
                differenceSum += Math.abs(student[courseA] - student[courseB]);
            }
        }
        if(numOfStudents==0){return -1;}
        return 10 - round(differenceSum/numOfStudents, 2);
    }

    /** finding similarities between courses
     * @param students_grades: a 2D-array containing studentID and grades
     * @param numOfCourses number of courses in the array
     * @return 2D array with values of type double that indicate similarity
    */
    public static double[][] Similarity_Array(double[][] studentGradesArray, int numOfCourses){
        double[][] array = new double[numOfCourses][numOfCourses];
        for(int A=0; A<numOfCourses; A++){
            for(int B=A; B<numOfCourses; B++){
                double similarity = round(Course_Similarity(studentGradesArray, A, B),2);
                array[A][B] = similarity;
                array[B][A]  =similarity;
            }
        }
        
        return array;
    }
    public static double[][] Comparing_Courses( double[][] similarity_array,double[][] studentGradesArray, int numOfCourses){
        double[][] array = new double[0][];
        // Similarity divides
        for(double[] row:similarity_array){
           // to finish
            
        }
      
        
        return array;
    }

    public static double[] Course_Average(double[][] graduate_grades) {
        double[] average = new double[graduate_grades[0].length]; //create an array for each average course grade
        int courses = graduate_grades[0].length; //number of courses
        int grades = graduate_grades.length; //number of grades for each course

        for (int row = 0; row < courses; row++) {
            for (int column = 0; column < grades; column++) {
                average[row] += graduate_grades[column][row];
            }
        }

        for (int row = 0; row < courses; row++) {
            average[row] /= grades;
        }

        return average; //return 1d array
    }
    public static double[] hardest_courses(double[][] graduate_grades) {
        double[] average = Course_Average(graduate_grades); // Use Arrays.sort to sort the array in ascending order
        Arrays.sort(average);
        double[] five_hardest = new double[5];

        for (int i = 0; i < 5; i++) {
            five_hardest[i] += average[i];
        }
        return five_hardest;
    }
    public static double[] easiest_courses(double[][] graduate_grades) {
        double[] average = Course_Average(graduate_grades);// Use Arrays.sort to sort the array in ascending order
        Arrays.sort(average);
            for (int i = 0; i < average.length / 2; i++) {
                double temp = average[i];
                average[i] = average[average.length - 1 - i];
                average[average.length - 1 - i] = temp;
            }
        double[] five_easiest = new double[5];

        for (int i = 0; i < 5; i++) {
            five_easiest[i] += average[i];
        }
        return five_easiest;
    }

    
      /** finding similarities between courses via pearson correlation : Class Correlation analysis
     * *
    */
    
   public static double calculateMean(double[] values) {
    double sum = 0.0;
    double[] var3 = values;
    int var4 = values.length;

    for(int var5 = 0; var5 < var4; ++var5) {
       double value = var3[var5];
       sum += value;
    }

    return sum / (double)values.length;
 }

 public static double calculatingPearsonCorrelation(double[] x, double[] y) {
    double meanX = calculateMean(x);
    double meanY = calculateMean(y);
    int n = x.length;
    double sumXY = 0.0;
    double sumXX = 0.0;
    double sumYY = 0.0;

    for(int i = 0; i < n; ++i) {
       double xMinusMean = x[i] - meanX;
       double yMinusMean = y[i] - meanY;
       sumXY += xMinusMean * yMinusMean;
       sumXX += xMinusMean * xMinusMean;
       sumYY += yMinusMean * yMinusMean;
    }
    double correlation = sumXY / (Math.sqrt(sumXX) * Math.sqrt(sumYY));
    double roundedCorrelation = Math.round(correlation * 1000.0) / 1000.0;

    return roundedCorrelation;
    
 }

 public static double[][] TransposeCurrentGradesArray(double[][] students_grades) {
    int rows = students_grades.length;
    int columns = students_grades[0].length;
    double[][] transposedArray = new double[columns][rows];

    for(int i = 0; i < rows; ++i) {
       for(int j = 0; j < columns; ++j) {
          transposedArray[j][i] = students_grades[i][j];
       }
    }

    return transposedArray;
 }

 public static void relatedCourses(double[][] transposedArray) {
    int numCourses = transposedArray.length;

    // Create a 2D array to store correlation information
    String[][] correlationMatrix = new String[numCourses][numCourses];

    for (int i = 0; i < numCourses; ++i) {
        for (int j = i + 1; j < numCourses; ++j) {
            double correlation = calculatingPearsonCorrelation(transposedArray[i], transposedArray[j]);
            String correlationType = "";

            if (correlation >= 0.8 && correlation <= 1.0) {
                correlationType = "very strong";
            } else if (correlation >= 0.6 && correlation < 0.8) {
                correlationType = "strong";
            } else if (correlation >= 0.4 && correlation < 0.6) {
                correlationType = "moderate";
            } else {
                correlationType = "low";
            }

            correlationMatrix[i][j] = correlationType;
        }
    }

    // Print the correlation matrix with course labels
    List<String> courseLabels = Arrays.asList(
        "JTE-234", "ATE-003", "TGL-013", "PPL-239", "WDM-974",
        "GHL-823", "HLU-200", "MON-014", "FEA-907", "LPG-307",
        "TSO-010", "LDE-009", "JJP-001", "MTE-004", "LUU-003",
        "LOE-103", "PLO-132", "BKO-800", "SLE-332", "BKO-801",
        "DSE-003", "DSE-005", "ATE-014", "JTW-004", "ATE-008",
        "DSE-007", "ATE-214", "JHF-101", "KMO-007", "WOT-104"
    );

    for (int i = 0; i < numCourses; ++i) {
        for (int j = i + 1; j < numCourses; ++j) {
            String course1 = courseLabels.get(i);
            String course2 = courseLabels.get(j);
            String correlationType = correlationMatrix[i][j];
            double correlation = calculatingPearsonCorrelation(transposedArray[i], transposedArray[j]);

            System.out.println(course1 + " and " + course2 + ": " + correlationType + " = " + correlation);
        }
    }
}

public static void CorrelationMatrix(double[][] transposedArray) {
    int numCourses = transposedArray.length;

    double[][] correlationMatrix = new double[numCourses][numCourses];

    // Fill the correlation matrix
    for (int i = 0; i < numCourses; ++i) {
        for (int j = 0; j < numCourses; ++j) {
            double[] subject1 = new double[transposedArray.length];
            double[] subject2 = new double[transposedArray.length];

            for (int k = 0; k < transposedArray.length; ++k) {
                subject1[k] = transposedArray[k][i];
                subject2[k] = transposedArray[k][j];
            }

            double correlation = calculatingPearsonCorrelation(subject1, subject2);
            correlationMatrix[i][j] = correlation;
        }
    }

    // Print the correlation matrix
    List<String> courseLabels = Arrays.asList(
        "JTE-234", "ATE-003", "TGL-013", "PPL-239", "WDM-974",
        "GHL-823", "HLU-200", "MON-014", "FEA-907", "LPG-307",
        "TSO-010", "LDE-009", "JJP-001", "MTE-004", "LUU-003",
        "LOE-103", "PLO-132", "BKO-800", "SLE-332", "BKO-801",
        "DSE-003", "DSE-005", "ATE-014", "JTW-004", "ATE-008",
        "DSE-007", "ATE-214", "JHF-101", "KMO-007", "WOT-104"
    );

    System.out.print("         ");

    for (String label : courseLabels) {
        System.out.printf("%-10s", label);
    }
    System.out.println("\n-----------------------------------------------");

    for (int i = 0; i < numCourses; ++i) {
        System.out.printf("%-8s | ", courseLabels.get(i));

        for (int j = 0; j < numCourses; ++j) {
            System.out.printf("%8.4f   ", correlationMatrix[i][j]);
        }
        System.out.println();
    }
}


     /*
     * 
     * STEP 2
     *  
     * 
     */

     
    public static boolean[][] Missing_Grades_Table(double[][] studentGradesArray){
        boolean[][] studentGradesPresent = new boolean[0][];
        int groups  = 0;

        for(double[] student : studentGradesArray){
            if(student == null){continue;}
            //convert students grades into array which marks courses as graded 
            boolean[] hasGrade = new boolean[student.length]; //stores if student has grade for course or not
            for(int course=0; course<student.length; course++){
                if(student[course]!=-1){
                    hasGrade[course] = true;
                }
            }

            //checks if hasGrade isnt already in studentGradesPresent
            boolean same = false;
            for(boolean[] group : studentGradesPresent){ 
                if(Arrays.equals(group, hasGrade)){
                    same = true;
                }
            }
            if(!same){
                groups++;
                studentGradesPresent = Arrays.copyOf(studentGradesPresent, groups);
                studentGradesPresent[groups-1] = hasGrade;
            }
        }    
        return studentGradesPresent;       
    }

    public static int[] Index_Sort(int[] array){
        double[] temp = new double[array.length];

        for(int index=0; index<array.length; index++){
            temp[index] = array[index] + index/100.0; 
        }
        
        Arrays.sort(temp);

        int[] printOrder = new int[temp.length];
        for (int i=0; i<temp.length; i++) {
            double d = temp[i];
            int p = (int) Math.round((d - (int) d) *100);
            printOrder[i] = p;
        }
        return printOrder;
    }

    //counts the students that have a grade for a course and returns the courses sorted
    public static int[] Students_Per_Course(double[][] studentGradesArray){
        int len = studentGradesArray.length;
        int number_of_courses = studentGradesArray[len-1].length;
        int[] student_per_course = new int[number_of_courses];

        for(int course=0; course<number_of_courses; course++){
            for (double[] student : studentGradesArray) {
                if(student!=null && student[course]!=-1){
                    student_per_course[course]++;
                }
            }
        }
        return Index_Sort(student_per_course);

        //return array_Sort_By_Column(Array_To_2Darray(student_per_course), 0);
    }

    public static void Print_Missing_Grades_Sorted(boolean[][] missing_grade_table, String[] courseArray){

        //stores the amount of grades there are per course
        int[] num_of_grades = new int[missing_grade_table[0].length]; 
        for(int course=0; course<missing_grade_table[0].length; course++){
            for (int group=0; group<missing_grade_table.length; group++) {
                if(missing_grade_table[group][course]==true){
                    num_of_grades[course]++;
                }
            }
        }
        
        //sorts courses based on the amount of grades
        int[] printOrder = Index_Sort(num_of_grades);
        
        System.out.println("\n\nGroups of students classified based on what courses are graded:\n");
        for(int course : printOrder){
            System.out.print(courseArray[course]+ " | ");
            for (boolean[] group : missing_grade_table) {
                if(group[course]){
                    System.out.print(" # ");
                } else {
                    System.out.print(" - ");
                }
                
            }
            System.out.println();
        }
        System.out.println();
    }

        //check for students who are going to graduate soon
    public static int[] Soon_Graduates(double[][] studentGradesArray){
        //requirements for graduating:
        int required_courses_passed = 25; 

        int grads = 0;
        int[] soon_graduates = new int[grads];

        //looping over students and checking requirements\
        
        for(int i=0;  i<studentGradesArray.length; i++){
            double[] student = studentGradesArray[i];
            double passing_grade = 6.0;
            int courses_passed = 0;

            if(student!=null){
                for (double course : student) {
                    if(course >= passing_grade){
                        courses_passed++;
                    }
                }
                if(courses_passed>=required_courses_passed){
                    grads++;
                    soon_graduates = Arrays.copyOf(soon_graduates, grads);
                    soon_graduates[grads-1] = i;
                }
            }
        }
        System.out.println("# of graduates: "+ grads);
        return soon_graduates;
        
    }

    //looks for students that are eligible to graduate (no failed courses)
    public static int[] Eligible_To_Graduate(double[][] studentGradesArray){
        double passing_grade = 6.0;
        int eligible = 0;
        int[] eligibleID = new int[eligible];

        for(int i=0;  i<studentGradesArray.length; i++){
            double[] student = studentGradesArray[i];

            if(student!=null){
                boolean all_passed = true;
                for (int course=0; course<student.length && all_passed; course++) {
                    double grade = student[course];
                    if(grade < passing_grade && grade != -1){
                        all_passed = false;
                    }
                }
                if(all_passed){
                    eligible++;
                    eligibleID = Arrays.copyOf(eligibleID, eligible);
                    eligibleID[eligible-1] = i;
                }
            }
            
        }
        return eligibleID;
    }



    /*
     * 
     *  SIMPLE OFTEN USED METHODS
     * 
     */

    /** reuseable simple array prase int->double double->int
     * @param double_array/int_array: arrays of int or double type
     * @return prased array
    **/
    public static int[] Array_Double_To_Int(double[] double_array){
        int[] int_array = new int[double_array.length];
        for(int i=0;i<double_array.length;i++){
            int_array [i] = (int)double_array[i];
        }
        return int_array;
    }
    public static double[] Array_Int_To_Double(int[] int_array){
        double[] double_array = new double[int_array.length];
        for(int i=0;i<int_array.length;i++){
            double_array [i] = (double)int_array[i];
        }
        return double_array;
    }
     /** Simple rounding function to specified decimal place
     *  @param k: double to be rounded
     *  @param decimalPlace: specifies the decimal place for rounding
     *  @return double rounded number
    **/
    public static double round(double k, int decimalPlace){
        return Math.round(k*Math.pow(10,decimalPlace) )/Math.pow(10,decimalPlace);
    }
      /** Sotring array, and putting array's id s in same order as sorted array
     *  @param arr: array to be sorted
     *  @param order: true : ascending / false : descending
     *  @return 2d array {{sorted array}{sorted array's id s}}
    **/
    public static double[][] Sort_With_Id(double[] arr,boolean order){
       
        double[][] sorted_arr_w_id= new double[2][arr.length];
        double[] id_arr=new double[arr.length];
        for(int i=0; i<id_arr.length;i++){
            id_arr[i]=i;
        }
        boolean change=false;
        double temp;
        //order:
        //true : ascending
        //false : descending
        for(int i=0;i<arr.length-1; i++){
            for(int j=0;j<arr.length-1;j++){
                if((arr[j]<arr[j+1]) && order){ // ascending
                    // 2 values are replaced by each otehr
                    temp= arr[j+1];
                    arr[j+1]=arr[j];
                    arr[j]=temp;
                    change=true;
                }
                else if(arr[j]>arr[j+1] && !order) { //descending
                    temp= arr[j+1];
                    arr[j+1]=arr[j];
                    arr[j]=temp;
                    change=true;
                }
                if(change){
                    temp=id_arr[j+1];
                    id_arr[j+1]=id_arr[j];
                    id_arr[j]=temp;
                    change=false;
                }
            }
        }
        for(int i=0;i<sorted_arr_w_id[0].length; i++){
            sorted_arr_w_id[0][i]= arr[i];
            sorted_arr_w_id[1][i]= id_arr[i];
        }
        System.out.println(Arrays.toString(arr));
        System.out.println(Arrays.toString(id_arr));
        System.out.println(Arrays.deepToString(sorted_arr_w_id));
        return sorted_arr_w_id; 
    }
}

