import java.io.File;
import java.util.Arrays;
import java.util.Scanner;

public class App{

    public static void main(String[] args) {
        //arrays 
        //double[][] graduate_grades = File_To_Array("GraduateGrades.csv");
        //double[][] current_grades = File_To_Array("CurrentGrades.csv");
       

       //use if you have werid bug wiht 0.0's in graduate grades. the error is located in File_To_Array - hasNextDouble
       
        double[][] graduate_grades={
            {8.0, 8.0, 7.0, 8.0, 6.0, 7.0, 9.0, 7.0, 8.0, 6.0, 6.0, 9.0, 10.0, 8.0, 6.0, 10.0, 7.0, 9.0, 10.0, 8.0, 6.0, 8.0, 6.0, 6.0, 6.0, 9.0, 6.0, 6.0, 6.0, 8.0},
            {10.0, 10.0, 10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,}, //cum laudge
            {8.0, 7.0, 9.0, 8.0, 7.0, 9.0, 9.0, 6.0, 7.0, 8.0, 6.0, 7.0, 7.0, 8.0, 6.0, 6.0, 9.0, 6.0, 9.0, 8.0, 10.0, 7.0, 10.0, 10.0, 8.0, 7.0, 9.0, 9.0, 7.0, 7.0},
            {8.0, 10.0, 8.0, 8.0, 7.0, 8.0, 6.0, 7.0, 8.0, 9.0, 7.0, 6.0, 7.0, 8.0, 8.0, 9.0, 9.0, 6.0, 7.0, 7.0, 6.0, 10.0, 7.0, 8.0, 6.0, 6.0, 7.0, 9.0, 6.0, 6.0},
            {6.0, 7.0, 6.0, 6.0, 6.0, 8.0, 10.0, 8.0, 10.0, 9.0, 7.0, 7.0, 7.0, 6.0, 8.0, 8.0, 6.0, 6.0, 6.0, 7.0, 9.0, 8.0, 8.0, 9.0, 8.0, 8.0, 10.0, 6.0, 6.0, 6.0},
            {9.0, 10.0, 6.0, 7.0, 7.0, 6.0, 9.0, 6.0, 8.0, 8.0, 7.0, 7.0, 6.0, 6.0, 9.0, 6.0, 8.0, 6.0, 8.0, 9.0, 8.0, 9.0, 8.0, 7.0, 6.0, 6.0, 8.0, 6.0, 7.0, 8.0},
            {7.0, 8.0, 10.0, 6.0, 7.0, 7.0, 6.0, 6.0, 8.0, 7.0, 6.0, 6.0, 8.0, 7.0, 6.0, 8.0, 8.0, 6.0, 9.0, 6.0, 8.0, 8.0, 7.0, 9.0, 9.0, 8.0, 10.0, 6.0, 7.0, 8.0},
            {8.0, 8.0, 7.0, 7.0, 7.0, 6.0, 8.0, 6.0, 10.0, 9.0, 6.0, 8.0, 7.0, 7.0, 9.0, 6.0, 8.0, 6.0, 6.0, 7.0, 8.0, 10.0, 7.0, 8.0, 7.0, 6.0, 9.0, 6.0, 9.0, 6.0},
            {7.0, 9.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 6.0, 8.0, 8.0, 8.0, 6.0, 7.0, 7.0, 7.0, 8.0, 6.0, 7.0, 9.0, 7.0, 6.0, 8.0, 7.0, 10.0, 7.0, 7.0, 6.0},
            {8.0, 8.0, 8.0, 7.0, 8.0, 7.0, 8.0, 6.0, 7.0, 10.0, 6.0, 7.0, 7.0, 7.0, 9.0, 9.0, 7.0, 6.0, 8.0, 6.0, 10.0, 8.0, 6.0, 6.0, 6.0, 6.0, 10.0, 8.0, 6.0, 6.0},
            {9.0, 8.0, 6.0, 8.0, 6.0, 6.0, 10.0, 7.0, 8.0, 8.0, 7.0, 8.0, 8.0, 9.0, 7.0, 9.0, 9.0, 6.0, 8.0, 6.0, 7.0, 7.0, 6.0, 9.0, 7.0, 6.0, 6.0, 6.0, 9.0, 7.0},
            {8.0, 9.0, 9.0, 7.0, 6.0, 6.0, 8.0, 9.0, 7.0, 7.0, 6.0, 8.0, 10.0, 8.0, 7.0, 10.0, 8.0, 6.0, 6.0, 7.0, 7.0, 9.0, 7.0, 8.0, 7.0, 7.0, 6.0, 6.0, 8.0, 6.0},
            {10.0, 9.0, 7.0, 7.0, 7.0, 6.0, 9.0, 7.0, 8.0, 10.0, 6.0, 6.0, 7.0, 8.0, 9.0, 7.0, 8.0, 6.0, 6.0, 6.0, 9.0, 7.0, 7.0, 7.0, 8.0, 8.0, 9.0, 9.0, 6.0, 6.0},
            {6.0, 7.0, 8.0, 6.0, 6.0, 7.0, 8.0, 6.0, 9.0, 10.0, 6.0, 6.0, 7.0, 6.0, 9.0, 7.0, 6.0, 6.0, 7.0, 8.0, 9.0, 6.0, 7.0, 10.0, 8.0, 8.0, 8.0, 6.0, 6.0, 6.0},
            {7.0, 7.0, 6.0, 7.0, 8.0, 8.0, 6.0, 6.0, 10.0, 8.0, 7.0, 7.0, 7.0, 6.0, 7.0, 9.0, 6.0, 6.0, 8.0, 6.0, 6.0, 10.0, 9.0, 7.0, 6.0, 6.0, 7.0, 7.0, 7.0, 8.0},
            {6.0, 8.0, 6.0, 7.0, 9.0, 7.0, 6.0, 8.0, 7.0, 7.0, 7.0, 6.0, 8.0, 9.0, 6.0, 6.0, 7.0, 6.0, 9.0, 7.0, 10.0, 9.0, 10.0, 9.0, 8.0, 6.0, 9.0, 10.0, 8.0, 6.0},
            {6.0, 9.0, 7.0, 7.0, 8.0, 8.0, 9.0, 6.0, 6.0, 6.0, 7.0, 6.0, 9.0, 6.0, 7.0, 6.0, 10.0, 7.0, 7.0, 6.0, 8.0, 8.0, 6.0, 7.0, 6.0, 7.0, 6.0, 6.0, 7.0, 6.0},
            {9.0, 8.0, 6.0, 6.0, 7.0, 6.0, 8.0, 8.0, 6.0, 7.0, 7.0, 6.0, 6.0, 7.0, 8.0, 8.0, 8.0, 7.0, 10.0, 7.0, 9.0, 8.0, 9.0, 7.0, 6.0, 8.0, 8.0, 6.0, 7.0, 6.0},
            {9.0, 9.0, 6.0, 6.0, 6.0, 6.0, 6.0, 8.0, 9.0, 7.0, 8.0, 9.0, 8.0, 6.0, 7.0, 6.0, 6.0, 6.0, 8.0, 6.0, 9.0, 7.0, 6.0, 8.0, 6.0, 7.0, 7.0, 8.0, 6.0, 6.0},
            {10.0, 8.0, 6.0, 7.0, 8.0, 6.0, 9.0, 10.0, 6.0, 10.0, 8.0, 6.0, 6.0, 8.0, 6.0, 6.0, 6.0, 7.0, 8.0, 9.0, 7.0, 8.0, 7.0, 8.0, 10.0, 7.0, 6.0, 6.0, 10.0, 6.0},
            {6.0, 6.0, 6.0, 8.0, 8.0, 9.0, 8.0, 7.0, 6.0, 10.0, 8.0, 6.0, 9.0, 7.0, 7.0, 6.0, 8.0, 6.0, 6.0, 7.0, 7.0, 9.0, 6.0, 7.0, 6.0, 8.0, 8.0, 9.0, 6.0, 6.0},
            {8.0, 10.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 6.0, 8.0, 9.0, 10.0, 6.0, 8.0, 7.0, 6.0, 8.0, 7.0, 9.0, 6.0, 9.0, 7.0, 6.0, 8.0, 9.0, 7.0, 7.0, 6.0},
            {7.0, 9.0, 7.0, 8.0, 9.0, 6.0, 7.0, 9.0, 6.0, 8.0, 9.0, 7.0, 6.0, 8.0, 7.0, 6.0, 7.0, 9.0, 8.0, 8.0, 10.0, 9.0, 6.0, 9.0, 10.0, 8.0, 8.0, 6.0, 10.0, 7.0},
            {8.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 9.0, 6.0, 6.0, 6.0, 6.0, 10.0, 7.0, 6.0, 6.0, 10.0, 6.0, 7.0, 9.0, 8.0, 6.0, 9.0, 8.0, 7.0, 7.0, 6.0, 6.0, 8.0, 7.0},
            {8.0, 9.0, 8.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 9.0, 6.0, 6.0, 8.0, 8.0, 8.0, 8.0, 7.0, 6.0, 8.0, 7.0, 7.0, 10.0, 6.0, 6.0, 7.0, 6.0, 9.0, 6.0, 6.0, 9.0},
            {7.0, 8.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 9.0, 6.0, 8.0, 9.0, 8.0, 9.0, 8.0, 6.0, 6.0, 8.0, 7.0, 8.0, 7.0, 6.0, 6.0, 6.0, 9.0, 7.0, 7.0, 6.0, 6.0},
            {7.0, 7.0, 6.0, 8.0, 9.0, 8.0, 7.0, 8.0, 6.0, 8.0, 6.0, 6.0, 7.0, 8.0, 6.0, 9.0, 7.0, 6.0, 8.0, 9.0, 6.0, 6.0, 8.0, 8.0, 6.0, 8.0, 9.0, 6.0, 7.0, 6.0},
            {9.0, 8.0, 7.0, 6.0, 7.0, 6.0, 6.0, 8.0, 8.0, 6.0, 6.0, 6.0, 8.0, 7.0, 7.0, 8.0, 9.0, 8.0, 7.0, 8.0, 6.0, 10.0, 10.0, 8.0, 6.0, 8.0, 8.0, 6.0, 8.0, 6.0},
            {7.0, 8.0, 7.0, 6.0, 7.0, 7.0, 6.0, 7.0, 9.0, 8.0, 6.0, 8.0, 10.0, 8.0, 7.0, 6.0, 8.0, 7.0, 8.0, 7.0, 7.0, 9.0, 8.0, 9.0, 6.0, 6.0, 7.0, 6.0, 6.0, 6.0},
            {7.0, 8.0, 7.0, 7.0, 8.0, 8.0, 6.0, 6.0, 6.0, 7.0, 6.0, 7.0, 6.0, 8.0, 8.0, 6.0, 10.0, 8.0, 7.0, 7.0, 6.0, 9.0, 9.0, 6.0, 6.0, 6.0, 7.0, 9.0, 6.0, 8.0},
            {8.0, 8.0, 6.0, 6.0, 8.0, 6.0, 9.0, 7.0, 6.0, 8.0, 7.0, 7.0, 10.0, 6.0, 7.0, 9.0, 7.0, 7.0, 8.0, 7.0, 8.0, 8.0, 7.0, 6.0, 6.0, 7.0, 8.0, 8.0, 8.0, 7.0},
            {7.0, 9.0, 6.0, 6.0, 7.0, 7.0, 7.0, 6.0, 8.0, 7.0, 6.0, 7.0, 8.0, 8.0, 7.0, 8.0, 7.0, 9.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 8.0, 6.0},
            {7.0, 8.0, 8.0, 6.0, 6.0, 7.0, 8.0, 6.0, 7.0, 8.0, 8.0, 6.0, 6.0, 9.0, 8.0, 8.0, 6.0, 6.0, 6.0, 6.0, 8.0, 7.0, 6.0, 9.0, 7.0, 6.0, 10.0, 7.0, 6.0, 6.0},
            {8.0, 10.0, 7.0, 8.0, 7.0, 8.0, 6.0, 6.0, 8.0, 8.0, 7.0, 6.0, 7.0, 8.0, 6.0, 8.0, 6.0, 7.0, 8.0, 9.0, 7.0, 8.0, 6.0, 6.0, 6.0, 8.0, 6.0, 6.0, 8.0, 6.0},
            {7.0, 9.0, 6.0, 9.0, 6.0, 6.0, 6.0, 7.0, 10.0, 6.0, 6.0, 6.0, 6.0, 8.0, 9.0, 8.0, 6.0, 7.0, 7.0, 6.0, 7.0, 7.0, 7.0, 9.0, 7.0, 8.0, 6.0, 6.0, 7.0, 6.0},
            {8.0, 6.0, 7.0, 7.0, 7.0, 8.0, 7.0, 6.0, 9.0, 7.0, 6.0, 7.0, 10.0, 7.0, 6.0, 8.0, 9.0, 8.0, 9.0, 6.0, 7.0, 9.0, 6.0, 10.0, 6.0, 7.0, 9.0, 7.0, 7.0, 8.0},
            {6.0, 10.0, 7.0, 6.0, 9.0, 6.0, 7.0, 7.0, 7.0, 10.0, 7.0, 7.0, 7.0, 6.0, 7.0, 9.0, 7.0, 6.0, 8.0, 10.0, 9.0, 8.0, 9.0, 6.0, 6.0, 10.0, 8.0, 6.0, 6.0, 8.0},
            {6.0, 10.0, 6.0, 7.0, 7.0, 7.0, 8.0, 9.0, 6.0, 10.0, 7.0, 8.0, 9.0, 8.0, 7.0, 10.0, 6.0, 6.0, 8.0, 7.0, 10.0, 10.0, 7.0, 6.0, 6.0, 6.0, 7.0, 6.0, 8.0, 7.0},
            {8.0, 10.0, 6.0, 6.0, 7.0, 8.0, 6.0, 9.0, 7.0, 6.0, 6.0, 8.0, 9.0, 6.0, 6.0, 6.0, 8.0, 6.0, 8.0, 9.0, 7.0, 6.0, 8.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0},
            {6.0, 10.0, 7.0, 7.0, 7.0, 9.0, 6.0, 6.0, 7.0, 6.0, 6.0, 6.0, 10.0, 6.0, 6.0, 7.0, 6.0, 8.0, 8.0, 6.0, 9.0, 8.0, 7.0, 6.0, 6.0, 6.0, 9.0, 6.0, 8.0, 10.0},
            {8.0, 10.0, 6.0, 8.0, 7.0, 7.0, 7.0, 6.0, 8.0, 10.0, 6.0, 6.0, 7.0, 6.0, 9.0, 6.0, 8.0, 9.0, 7.0, 6.0, 8.0, 7.0, 10.0, 8.0, 6.0, 8.0, 9.0, 7.0, 7.0, 6.0},
            {9.0, 8.0, 6.0, 9.0, 7.0, 6.0, 8.0, 9.0, 9.0, 6.0, 6.0, 7.0, 8.0, 8.0, 8.0, 6.0, 7.0, 6.0, 7.0, 7.0, 8.0, 7.0, 7.0, 7.0, 7.0, 8.0, 10.0, 6.0, 10.0, 6.0},
            {9.0, 10.0, 6.0, 9.0, 8.0, 6.0, 8.0, 6.0, 7.0, 9.0, 7.0, 7.0, 8.0, 6.0, 7.0, 6.0, 7.0, 8.0, 6.0, 9.0, 9.0, 7.0, 6.0, 8.0, 6.0, 9.0, 6.0, 10.0, 7.0, 7.0},
            {6.0, 10.0, 9.0, 9.0, 8.0, 7.0, 6.0, 7.0, 7.0, 8.0, 8.0, 6.0, 8.0, 6.0, 7.0, 9.0, 8.0, 8.0, 6.0, 7.0, 6.0, 9.0, 6.0, 7.0, 6.0, 8.0, 7.0, 6.0, 8.0, 6.0},
            {6.0, 8.0, 6.0, 7.0, 8.0, 8.0, 6.0, 6.0, 9.0, 7.0, 7.0, 6.0, 7.0, 7.0, 7.0, 10.0, 7.0, 7.0, 8.0, 6.0, 6.0, 6.0, 6.0, 7.0, 6.0, 7.0, 9.0, 6.0, 7.0, 6.0},
            {10.0, 10.0, 7.0, 6.0, 6.0, 7.0, 8.0, 10.0, 8.0, 7.0, 6.0, 6.0, 9.0, 8.0, 6.0, 10.0, 6.0, 7.0, 6.0, 9.0, 6.0, 8.0, 7.0, 8.0, 8.0, 6.0, 7.0, 6.0, 8.0, 6.0},
            {9.0, 6.0, 7.0, 6.0, 6.0, 6.0, 8.0, 10.0, 6.0, 7.0, 6.0, 7.0, 9.0, 6.0, 6.0, 9.0, 8.0, 7.0, 8.0, 7.0, 7.0, 9.0, 9.0, 7.0, 6.0, 6.0, 8.0, 6.0, 8.0, 6.0},
            {6.0, 10.0, 8.0, 7.0, 9.0, 7.0, 6.0, 7.0, 8.0, 8.0, 9.0, 6.0, 6.0, 8.0, 6.0, 7.0, 6.0, 6.0, 9.0, 6.0, 8.0, 7.0, 7.0, 6.0, 6.0, 6.0, 10.0, 6.0, 6.0, 9.0},
            {6.0, 10.0, 6.0, 9.0, 8.0, 6.0, 7.0, 10.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 8.0, 6.0, 8.0, 6.0, 9.0, 10.0, 7.0, 9.0, 6.0, 10.0, 6.0, 6.0, 7.0, 8.0},
            {7.0, 6.0, 6.0, 6.0, 7.0, 8.0, 8.0, 6.0, 6.0, 10.0, 6.0, 6.0, 10.0, 7.0, 7.0, 6.0, 10.0, 6.0, 8.0, 6.0, 8.0, 6.0, 8.0, 7.0, 8.0, 8.0, 9.0, 6.0, 8.0, 6.0},
            {6.0, 8.0, 10.0, 7.0, 8.0, 6.0, 10.0, 10.0, 6.0, 7.0, 6.0, 7.0, 6.0, 8.0, 7.0, 6.0, 9.0, 6.0, 9.0, 6.0, 7.0, 10.0, 7.0, 10.0, 8.0, 8.0, 8.0, 7.0, 8.0, 6.0},
            {9.0, 10.0, 8.0, 9.0, 7.0, 6.0, 6.0, 6.0, 9.0, 7.0, 6.0, 7.0, 8.0, 10.0, 6.0, 8.0, 6.0, 8.0, 7.0, 6.0, 9.0, 7.0, 6.0, 10.0, 6.0, 9.0, 9.0, 6.0, 9.0, 7.0},
            {6.0, 9.0, 6.0, 7.0, 8.0, 6.0, 8.0, 6.0, 8.0, 6.0, 6.0, 8.0, 7.0, 7.0, 8.0, 7.0, 9.0, 8.0, 7.0, 6.0, 8.0, 9.0, 7.0, 8.0, 6.0, 8.0, 9.0, 7.0, 6.0, 6.0},
            {7.0, 9.0, 6.0, 6.0, 6.0, 6.0, 9.0, 6.0, 9.0, 6.0, 8.0, 6.0, 9.0, 7.0, 7.0, 6.0, 9.0, 6.0, 9.0, 9.0, 10.0, 9.0, 8.0, 9.0, 6.0, 8.0, 6.0, 8.0, 6.0, 8.0},
            {8.0, 10.0, 7.0, 8.0, 6.0, 8.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 8.0, 6.0, 8.0, 6.0, 6.0, 7.0, 7.0, 6.0, 8.0, 10.0, 8.0, 7.0, 6.0, 6.0, 7.0, 8.0, 6.0, 7.0},
            {6.0, 8.0, 6.0, 8.0, 6.0, 6.0, 7.0, 8.0, 7.0, 7.0, 6.0, 6.0, 8.0, 8.0, 6.0, 9.0, 10.0, 7.0, 8.0, 6.0, 7.0, 7.0, 6.0, 7.0, 6.0, 9.0, 6.0, 6.0, 8.0, 6.0},
            {6.0, 7.0, 6.0, 9.0, 9.0, 7.0, 7.0, 7.0, 8.0, 8.0, 8.0, 7.0, 8.0, 6.0, 10.0, 7.0, 7.0, 7.0, 8.0, 10.0, 8.0, 10.0, 10.0, 8.0, 7.0, 6.0, 6.0, 6.0, 9.0, 6.0},
            {8.0, 8.0, 8.0, 7.0, 7.0, 6.0, 7.0, 6.0, 9.0, 7.0, 6.0, 6.0, 8.0, 9.0, 7.0, 7.0, 8.0, 6.0, 8.0, 6.0, 9.0, 6.0, 7.0, 6.0, 6.0, 7.0, 6.0, 7.0, 8.0, 7.0},
            {9.0, 9.0, 6.0, 6.0, 7.0, 6.0, 7.0, 7.0, 10.0, 7.0, 10.0, 7.0, 8.0, 7.0, 6.0, 10.0, 6.0, 6.0, 8.0, 7.0, 7.0, 9.0, 7.0, 7.0, 6.0, 8.0, 8.0, 6.0, 6.0, 6.0},
            {7.0, 8.0, 6.0, 8.0, 8.0, 7.0, 6.0, 7.0, 7.0, 8.0, 8.0, 7.0, 6.0, 7.0, 8.0, 7.0, 6.0, 7.0, 9.0, 7.0, 6.0, 8.0, 9.0, 9.0, 6.0, 8.0, 10.0, 7.0, 7.0, 6.0},
            {7.0, 9.0, 8.0, 7.0, 7.0, 7.0, 6.0, 8.0, 6.0, 6.0, 6.0, 7.0, 9.0, 7.0, 7.0, 6.0, 8.0, 7.0, 8.0, 6.0, 6.0, 7.0, 6.0, 8.0, 8.0, 7.0, 6.0, 6.0, 9.0, 10.0},
            {9.0, 7.0, 8.0, 7.0, 7.0, 8.0, 8.0, 8.0, 10.0, 10.0, 6.0, 6.0, 10.0, 7.0, 7.0, 8.0, 7.0, 7.0, 9.0, 6.0, 8.0, 8.0, 7.0, 9.0, 6.0, 7.0, 7.0, 6.0, 6.0, 6.0},
            {8.0, 10.0, 8.0, 8.0, 7.0, 6.0, 7.0, 8.0, 7.0, 7.0, 6.0, 10.0, 7.0, 7.0, 10.0, 7.0, 6.0, 8.0, 7.0, 6.0, 8.0, 8.0, 7.0, 9.0, 6.0, 6.0, 9.0, 6.0, 9.0, 7.0},
            {8.0, 6.0, 8.0, 6.0, 9.0, 7.0, 10.0, 7.0, 8.0, 8.0, 7.0, 6.0, 7.0, 8.0, 7.0, 6.0, 10.0, 6.0, 8.0, 9.0, 6.0, 9.0, 6.0, 7.0, 6.0, 6.0, 9.0, 7.0, 6.0, 7.0},
            {8.0, 7.0, 6.0, 10.0, 6.0, 6.0, 7.0, 6.0, 6.0, 8.0, 6.0, 7.0, 8.0, 10.0, 8.0, 6.0, 10.0, 6.0, 7.0, 6.0, 10.0, 6.0, 9.0, 8.0, 8.0, 8.0, 6.0, 9.0, 7.0, 7.0},
            {7.0, 8.0, 6.0, 9.0, 7.0, 6.0, 6.0, 9.0, 9.0, 6.0, 6.0, 6.0, 8.0, 9.0, 7.0, 8.0, 8.0, 6.0, 6.0, 6.0, 8.0, 6.0, 9.0, 8.0, 7.0, 7.0, 8.0, 8.0, 6.0, 9.0},
            {8.0, 7.0, 7.0, 9.0, 7.0, 6.0, 7.0, 6.0, 10.0, 6.0, 6.0, 6.0, 9.0, 7.0, 6.0, 7.0, 6.0, 8.0, 8.0, 6.0, 6.0, 7.0, 8.0, 6.0, 6.0, 7.0, 7.0, 6.0, 6.0, 9.0},
            {8.0, 9.0, 7.0, 8.0, 8.0, 6.0, 10.0, 8.0, 8.0, 8.0, 7.0, 6.0, 7.0, 7.0, 8.0, 8.0, 8.0, 9.0, 6.0, 10.0, 6.0, 10.0, 6.0, 10.0, 6.0, 7.0, 8.0, 7.0, 8.0, 6.0},
            {6.0, 8.0, 8.0, 6.0, 6.0, 6.0, 9.0, 7.0, 6.0, 10.0, 6.0, 8.0, 8.0, 7.0, 9.0, 9.0, 6.0, 7.0, 6.0, 6.0, 10.0, 7.0, 6.0, 8.0, 6.0, 9.0, 8.0, 6.0, 7.0, 6.0},
            {10.0, 10.0, 6.0, 8.0, 9.0, 6.0, 7.0, 7.0, 8.0, 8.0, 7.0, 7.0, 7.0, 6.0, 8.0, 9.0, 10.0, 6.0, 8.0, 7.0, 9.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 6.0, 6.0, 6.0},
            {6.0, 10.0, 6.0, 7.0, 7.0, 10.0, 8.0, 7.0, 10.0, 9.0, 6.0, 7.0, 6.0, 9.0, 8.0, 7.0, 7.0, 6.0, 7.0, 8.0, 6.0, 6.0, 8.0, 8.0, 8.0, 8.0, 9.0, 6.0, 6.0, 6.0},
            {8.0, 10.0, 6.0, 7.0, 8.0, 8.0, 8.0, 7.0, 7.0, 8.0, 6.0, 6.0, 9.0, 7.0, 7.0, 6.0, 6.0, 9.0, 8.0, 7.0, 8.0, 6.0, 6.0, 7.0, 9.0, 6.0, 10.0, 7.0, 7.0, 6.0},
            {10.0, 7.0, 6.0, 7.0, 6.0, 10.0, 7.0, 8.0, 6.0, 8.0, 8.0, 7.0, 8.0, 8.0, 7.0, 7.0, 9.0, 6.0, 6.0, 9.0, 6.0, 8.0, 6.0, 7.0, 7.0, 8.0, 6.0, 7.0, 7.0, 7.0},
            {6.0, 6.0, 8.0, 6.0, 6.0, 6.0, 7.0, 7.0, 9.0, 10.0, 6.0, 6.0, 8.0, 7.0, 8.0, 8.0, 6.0, 8.0, 8.0, 9.0, 7.0, 10.0, 7.0, 8.0, 7.0, 7.0, 10.0, 7.0, 8.0, 8.0},
            {8.0, 7.0, 7.0, 6.0, 8.0, 7.0, 7.0, 8.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 9.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 6.0, 7.0, 8.0, 6.0, 7.0, 9.0, 6.0, 8.0, 7.0},
            {8.0, 8.0, 6.0, 8.0, 7.0, 7.0, 7.0, 6.0, 9.0, 6.0, 6.0, 7.0, 6.0, 6.0, 10.0, 8.0, 8.0, 6.0, 9.0, 6.0, 8.0, 6.0, 9.0, 7.0, 6.0, 6.0, 9.0, 6.0, 10.0, 6.0},
            {8.0, 6.0, 9.0, 8.0, 6.0, 8.0, 6.0, 7.0, 8.0, 8.0, 6.0, 6.0, 6.0, 7.0, 6.0, 7.0, 10.0, 8.0, 10.0, 6.0, 9.0, 8.0, 9.0, 10.0, 6.0, 7.0, 6.0, 7.0, 10.0, 6.0},
            {6.0, 9.0, 6.0, 7.0, 6.0, 6.0, 7.0, 7.0, 8.0, 8.0, 6.0, 9.0, 7.0, 8.0, 10.0, 8.0, 9.0, 8.0, 6.0, 6.0, 8.0, 8.0, 6.0, 8.0, 7.0, 9.0, 7.0, 7.0, 8.0, 9.0},
            {7.0, 6.0, 7.0, 7.0, 6.0, 6.0, 8.0, 8.0, 7.0, 8.0, 6.0, 7.0, 7.0, 9.0, 7.0, 7.0, 10.0, 7.0, 7.0, 6.0, 8.0, 8.0, 6.0, 9.0, 9.0, 7.0, 7.0, 6.0, 7.0, 6.0},
            {8.0, 7.0, 6.0, 6.0, 9.0, 6.0, 8.0, 6.0, 7.0, 8.0, 6.0, 6.0, 9.0, 8.0, 6.0, 6.0, 9.0, 6.0, 7.0, 8.0, 6.0, 10.0, 8.0, 8.0, 8.0, 8.0, 8.0, 7.0, 9.0, 6.0},
            {8.0, 7.0, 7.0, 8.0, 7.0, 9.0, 7.0, 6.0, 7.0, 6.0, 6.0, 6.0, 9.0, 7.0, 6.0, 6.0, 10.0, 7.0, 9.0, 8.0, 8.0, 7.0, 6.0, 8.0, 6.0, 8.0, 8.0, 6.0, 8.0, 7.0},
            {6.0, 8.0, 6.0, 8.0, 6.0, 6.0, 6.0, 10.0, 7.0, 8.0, 6.0, 8.0, 6.0, 8.0, 8.0, 8.0, 6.0, 7.0, 8.0, 7.0, 9.0, 6.0, 6.0, 7.0, 8.0, 7.0, 7.0, 8.0, 6.0, 7.0},
            {6.0, 6.0, 6.0, 6.0, 7.0, 6.0, 9.0, 8.0, 6.0, 7.0, 7.0, 7.0, 8.0, 6.0, 9.0, 7.0, 7.0, 7.0, 7.0, 6.0, 9.0, 10.0, 8.0, 6.0, 7.0, 8.0, 8.0, 7.0, 7.0, 8.0},
            {7.0, 10.0, 6.0, 8.0, 6.0, 7.0, 7.0, 6.0, 9.0, 6.0, 6.0, 10.0, 9.0, 7.0, 7.0, 6.0, 6.0, 10.0, 6.0, 6.0, 8.0, 8.0, 8.0, 6.0, 6.0, 8.0, 10.0, 7.0, 6.0, 7.0},
            {6.0, 10.0, 6.0, 7.0, 6.0, 8.0, 9.0, 7.0, 9.0, 6.0, 6.0, 7.0, 6.0, 6.0, 7.0, 9.0, 9.0, 8.0, 8.0, 8.0, 6.0, 9.0, 7.0, 9.0, 6.0, 7.0, 8.0, 8.0, 7.0, 6.0},
            {6.0, 9.0, 6.0, 8.0, 6.0, 7.0, 7.0, 6.0, 8.0, 8.0, 6.0, 6.0, 7.0, 7.0, 7.0, 8.0, 7.0, 6.0, 7.0, 6.0, 7.0, 10.0, 7.0, 6.0, 8.0, 7.0, 10.0, 8.0, 10.0, 8.0},
            {6.0, 7.0, 8.0, 6.0, 6.0, 8.0, 9.0, 7.0, 7.0, 6.0, 6.0, 7.0, 7.0, 8.0, 7.0, 10.0, 7.0, 6.0, 7.0, 7.0, 6.0, 7.0, 6.0, 6.0, 6.0, 8.0, 8.0, 7.0, 8.0, 7.0},
            {8.0, 8.0, 10.0, 9.0, 6.0, 6.0, 6.0, 6.0, 9.0, 10.0, 6.0, 6.0, 6.0, 6.0, 8.0, 9.0, 7.0, 6.0, 8.0, 7.0, 7.0, 8.0, 6.0, 7.0, 6.0, 6.0, 8.0, 7.0, 10.0, 6.0},
            {8.0, 9.0, 9.0, 8.0, 7.0, 7.0, 6.0, 7.0, 6.0, 9.0, 6.0, 7.0, 9.0, 7.0, 7.0, 6.0, 10.0, 6.0, 6.0, 8.0, 6.0, 7.0, 6.0, 9.0, 6.0, 7.0, 10.0, 6.0, 7.0, 7.0},
            {7.0, 8.0, 6.0, 8.0, 7.0, 6.0, 8.0, 10.0, 6.0, 6.0, 6.0, 9.0, 7.0, 6.0, 8.0, 8.0, 8.0, 6.0, 7.0, 8.0, 8.0, 8.0, 6.0, 7.0, 7.0, 7.0, 8.0, 8.0, 6.0, 7.0},
            {8.0, 7.0, 6.0, 6.0, 8.0, 6.0, 9.0, 6.0, 7.0, 7.0, 6.0, 8.0, 8.0, 8.0, 7.0, 7.0, 6.0, 7.0, 6.0, 8.0, 7.0, 10.0, 8.0, 8.0, 6.0, 7.0, 7.0, 9.0, 7.0, 8.0},
            {7.0, 7.0, 6.0, 9.0, 6.0, 6.0, 8.0, 10.0, 7.0, 9.0, 6.0, 6.0, 9.0, 10.0, 6.0, 6.0, 7.0, 7.0, 7.0, 9.0, 6.0, 8.0, 10.0, 9.0, 6.0, 9.0, 8.0, 7.0, 6.0, 8.0},
            {10.0, 10.0, 8.0, 6.0, 10.0, 7.0, 6.0, 7.0, 7.0, 6.0, 8.0, 6.0, 8.0, 9.0, 6.0, 8.0, 9.0, 7.0, 6.0, 9.0, 6.0, 7.0, 6.0, 8.0, 8.0, 10.0, 8.0, 6.0, 6.0, 6.0},
            {10.0, 6.0, 8.0, 6.0, 7.0, 6.0, 6.0, 6.0, 9.0, 6.0, 6.0, 8.0, 6.0, 7.0, 8.0, 10.0, 8.0, 7.0, 6.0, 8.0, 7.0, 9.0, 7.0, 8.0, 9.0, 8.0, 7.0, 8.0, 6.0, 6.0},
            {8.0, 10.0, 6.0, 7.0, 6.0, 7.0, 9.0, 8.0, 6.0, 8.0, 7.0, 6.0, 7.0, 7.0, 7.0, 7.0, 10.0, 6.0, 7.0, 7.0, 8.0, 9.0, 7.0, 8.0, 8.0, 9.0, 8.0, 7.0, 10.0, 6.0},
            {6.0, 9.0, 6.0, 8.0, 6.0, 8.0, 8.0, 8.0, 7.0, 9.0, 9.0, 7.0, 8.0, 7.0, 6.0, 10.0, 7.0, 7.0, 9.0, 6.0, 6.0, 10.0, 6.0, 9.0, 6.0, 8.0, 7.0, 7.0, 6.0, 6.0},
            {7.0, 6.0, 10.0, 6.0, 8.0, 6.0, 8.0, 8.0, 7.0, 7.0, 7.0, 6.0, 10.0, 7.0, 7.0, 7.0, 6.0, 7.0, 9.0, 6.0, 6.0, 6.0, 8.0, 7.0, 6.0, 8.0, 10.0, 7.0, 8.0, 6.0},
            {9.0, 10.0, 10.0, 6.0, 8.0, 6.0, 9.0, 7.0, 7.0, 7.0, 6.0, 7.0, 6.0, 6.0, 7.0, 6.0, 8.0, 7.0, 8.0, 10.0, 7.0, 10.0, 8.0, 8.0, 8.0, 10.0, 9.0, 8.0, 6.0, 8.0},
            {6.0, 6.0, 6.0, 9.0, 6.0, 6.0, 8.0, 10.0, 9.0, 7.0, 8.0, 8.0, 10.0, 7.0, 6.0, 9.0, 7.0, 6.0, 10.0, 7.0, 8.0, 8.0, 6.0, 6.0, 6.0, 7.0, 9.0, 6.0, 6.0, 6.0},
            {6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 10.0, 8.0, 7.0, 8.0, 6.0, 6.0, 8.0, 7.0, 7.0, 6.0, 10.0, 8.0, 7.0, 9.0, 6.0, 6.0, 9.0, 6.0, 6.0, 6.0, 10.0, 6.0, 7.0, 6.0},
};

        double[][] current_grades={
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 8.0, -1.0, 8.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 7.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 5.0, -1.0, 7.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 6.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 5.0, -1.0, 5.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 5.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 5.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 5.0, -1.0, 5.0, -1.0, 5.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 5.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 5.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 10.0, -1.0, 8.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 8.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 6.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 7.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 8.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 9.0, -1.0, 7.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 8.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 5.0, -1.0, 5.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 4.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 6.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 9.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 9.0, -1.0, 9.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 9.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 6.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 6.0, -1.0, 5.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 5.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 6.0, -1.0, 5.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 5.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 8.0, -1.0, 8.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 10.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 7.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 8.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 9.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 8.0, -1.0, 8.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 10.0, 10.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 6.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 5.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 5.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 5.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 5.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 6.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 9.0, -1.0, 7.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 8.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 8.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 7.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 5.0, -1.0, 8.0, -1.0, 5.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 8.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 7.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 8.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 9.0, -1.0, 8.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 5.0, -1.0, 5.0, -1.0, 6.0, -1.0, -1.0, 4.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 6.0, -1.0, 5.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 5.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 6.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 8.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 5.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 5.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 6.0, -1.0, 5.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 6.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 6.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 6.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 6.0, -1.0, 5.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 5.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 5.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 5.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 7.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 8.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 7.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 7.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 5.0, -1.0, 6.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 6.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 5.0, -1.0, -1.0, 5.0, -1.0, -1.0, -1.0, -1.0, 6.0, 5.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 8.0, 6.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 7.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 9.0, -1.0, 8.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 9.0, 10.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 8.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 7.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 8.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 8.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 6.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 8.0, -1.0, 7.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 8.0, -1.0, 7.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 8.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 8.0, -1.0, 8.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 5.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 5.0, -1.0, 5.0, -1.0, -1.0, 4.0, -1.0, -1.0, -1.0, -1.0, 6.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 9.0, -1.0, 9.0, -1.0, -1.0, 10.0, -1.0, -1.0, -1.0, -1.0, 9.0, 10.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 9.0, -1.0, 7.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 8.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 7.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 7.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 9.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 7.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 8.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 9.0, -1.0, 9.0, -1.0, 7.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 8.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 7.0, -1.0, 8.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 8.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 10.0, -1.0, 9.0, -1.0, 9.0, -1.0, -1.0, 10.0, -1.0, -1.0, -1.0, -1.0, 8.0, 10.0, -1.0, -1.0, -1.0},
            {-1.0, 9.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 8.0, -1.0, 6.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 10.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 8.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 9.0, 9.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 8.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 6.0, -1.0, -1.0, -1.0, -1.0, 6.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 7.0, -1.0, 6.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 6.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 7.0, -1.0, 7.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},
            {-1.0, 7.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 6.0, -1.0, 7.0, -1.0, 6.0, -1.0, -1.0, 7.0, -1.0, -1.0, -1.0, -1.0, 7.0, 7.0, -1.0, -1.0, -1.0},
            {-1.0, 8.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 8.0, -1.0, 9.0, -1.0, 7.0, -1.0, -1.0, 9.0, -1.0, -1.0, -1.0, -1.0, 7.0, 8.0, -1.0, -1.0, -1.0},            

        }; 
        
        //MMS_Student  HERE PUT A DESIRED STUDENT ID
        
        int studentID = 1; // Replace with the student ID you want to calculate statistics for
        
                double[] studentStatistics = MMS_Student(graduate_grades, studentID);

                System.out.println("\n");
                System.out.println("Statistics for Student ID " + studentID + ": ");
                System.out.println("Mean: " + studentStatistics[0]);
                System.out.println("Median: " + studentStatistics[1]);
                System.out.println("Standard Deviation: " + studentStatistics[2] + "\n");

                
        int number_of_courses = graduate_grades[0].length;

        int[] cl_student_id = Cum_Laude_Graduates(graduate_grades);
        
       // System.out.println(Arrays.deepToString(Similarity_Array(graduate_grades, number_of_courses)));
        //System.out.println(Arrays.deepToString(Similarity_Array(current_grades, number_of_courses)));
        /* 
        //only used for printing the arrays  (id's are not not the ones from csv for currentGrades);
        System.out.println("number of courses: "+number_of_courses);
        System.out.println("graduate_grades for id's: \n");
        for(int i=0; i<graduate_grades.length; i++){
            if(graduate_grades[i] == null){continue;}
            System.out.println(i+": "+Arrays.toString(graduate_grades[i]));
		}
        System.out.println("\n\n" + "graduate_grades for id's: \n");
        for(int i=0; i<current_grades.length; i++){
            if(current_grades[i] == null){continue;}
            System.out.println(i+" "+Arrays.toString(current_grades[i]));
		}
        System.out.println("\n\n");
        System.out.println("Cum Laudge student's id:\n" +Arrays.toString(cl_student_id));
    */
      
    // answers  step 1
    System.out.println("Hardest coures: ");
    System.out.println("Easiest coures: ");
    System.out.println("Number of students with Cum Ludge: "+cl_student_id.length);
    System.out.println("Their ID's : "+Arrays.toString(cl_student_id));
    System.out.println("Most similar courses: ");
    Comparing_Courses(Similarity_Array(graduate_grades, number_of_courses),graduate_grades,number_of_courses);
    }

    public static double[][] File_To_Array(String fileName){
        try {
            double[][] studentGradesArray = new double[0][]; 
            File file=new File(fileName);
            Scanner fileScanner = new Scanner(file);

            int numOfCourses = 30;
            int studentID = -1; //small value to initialize
            int arrayLength=-1; //small value to initialize

            int linesDone = 0;
            while (fileScanner.hasNextLine() && linesDone <= 5) {
            	String line = fileScanner.nextLine();
            	linesDone++;
                int courseIndex = 0;    //keeps track of the course

            	// and one that scans the line entry per entry using the commas as delimiters
            	Scanner lineScanner = new Scanner(line);
                lineScanner.useDelimiter(",");
            	while (lineScanner.hasNext()) {
            		if (lineScanner.hasNextInt()) {
            			studentID = lineScanner.nextInt();

                        //If the index (indicated by studentID) is larger than the length of the array:
                        //  create a larger array with length studentID+1
                        if(arrayLength<studentID){
                            arrayLength = studentID;
                            studentGradesArray = Arrays.copyOf(studentGradesArray, studentID+1);
                        }
                        //initialises only the studentID's we need to save resources
                        studentGradesArray[studentID] = new double[numOfCourses];

            		} else if (lineScanner.hasNextDouble()) {
            			double d = lineScanner.nextDouble();
                        studentGradesArray[studentID][courseIndex]=d;
                        courseIndex++;
            		} else {
            			String s = lineScanner.next();
                        if(s.equals("NG")){
                            studentGradesArray[studentID][courseIndex]=-1;
                        }
                        courseIndex++;
            		}
            	}
            	lineScanner.close();
            }
            fileScanner.close();
            //prints the grades array per row with student index

            return studentGradesArray;
            
        } catch (Exception ex) {
            ex.printStackTrace();
            return null;
        }
    }



     /*
     * 
     * STEP 1
     *  - calculatating: mean median spread of grades for Students/Courses
     *  - creating list of honored students Cum Laude
     *  - findind similiarities between courses
     * 
     */


    /**calculates the mean, median and spread for a course with support for missing values
    * @param students_grades: a 2D-array containing studentID and grades
    * @param course: index of the grade corresponding to the course for a student
    * @return double array: containing {mean, median, spread}
    */
    public static double[] MMS_Course(double[][] students_grades, int course){
        double[] mms = {-1.0, -1.0, -1.0};
        int numOfstudents = 0;
        double[] courseGrades = new double[0];

        for (double[] student : students_grades) {
            if(student==null||student[course]==-1){continue;}
            numOfstudents++;
            courseGrades = Arrays.copyOf(courseGrades, numOfstudents);
            courseGrades[courseGrades.length-1] = student[course];
        }
        Arrays.sort(courseGrades);
        //System.out.println(Arrays.toString(courseGrades));
        if(numOfstudents==0)return mms;

        int len = courseGrades.length;

        //mean
        double sum = 0;
        for (double grade: courseGrades) {
            sum += grade;
        }
        double mean = sum/numOfstudents;
        mms[0] = round(sum/numOfstudents, 2);

        //median
        double median;
        if(len%2==1){ //odd 
            median =  courseGrades[courseGrades.length/2];
        }else{  //even 
            median = (courseGrades[len/2] + courseGrades[len/2-1])/2;
        } 
        mms[1] = round(median, 2);

        // standard deviation
        double deviation = 0;
        for (double grade: courseGrades) {
            deviation += (grade - mean) * (grade - mean);
        }
        deviation = Math.sqrt( (deviation / mean) );

        mms[2] = round(deviation, 2);

        return mms;
    }
    public static double[] MMS_Student(double[][] graduate_grades, int studentID) { 
    // to use this method you need to specify in main method for which student you would like to print MMS_Student for. 
    // Change a studentID at line of code nr. 222 (at the time of updating code)
                
                int amountOfCourses = graduate_grades[0].length;
                double[] mmsForStudent = new double[3];
        
                // Create an array to store the grades of the specified student
                double[] studentGrades = new double[amountOfCourses];
                
                // Copy the student's grades
                for (int j = 0; j < amountOfCourses; j++) {
                    studentGrades[j] = graduate_grades[studentID][j];
                }
        
                //mean 
                double sum = 0;
                for (double grade : studentGrades) {
                    sum += grade;
                }
                double mean = sum / amountOfCourses;
                    mmsForStudent[0] = mean;
                
                //median
                Arrays.sort(studentGrades);
                double median;
                if (amountOfCourses % 2 == 1) { // Odd
                    median = studentGrades[amountOfCourses / 2];
                } else { // Even
                    median = (studentGrades[amountOfCourses / 2 - 1] + studentGrades[amountOfCourses / 2]) / 2;
                }
                mmsForStudent[1] = median;
                
                //standard deviation
                double deviation = 0;
                for (double grade : studentGrades) {
                    deviation += (grade - mean) * (grade - mean);
                }
                deviation = Math.sqrt(deviation / amountOfCourses);
                mmsForStudent[2] = deviation;
        
                return mmsForStudent;
            }

    /** Simple Gpa calculator supporting missing values
     * @param student_grades: array containing only grades/missing grades !no student index!  
     * @return double GPA grade rounded to 2 decimal places
    **/
    public static double Calc_GPA(double[] student_grades ){
        // Gpa is calculated like mean (not considering credits of course)
        double sum=0.0;
        int decimal_places=2;
        for(double grade : student_grades){
            if(grade>=0){
                sum+=grade;
            }
        }
        return round((sum/student_grades.length), 2);
    }
    /** method returning array of Cum Ludge students 
     * @param graduate_grades: no support for missing values  
     * @return integer array
    */
    public static int[] Cum_Laude_Graduates (double[][] graduate_grades ){
        
        int num_of_honors=0;
        // checking number of the honored students
        for(int i=0; i<graduate_grades.length;i++){
            if(Calc_GPA(graduate_grades[i])>=8.00){
                num_of_honors++;
            }
        }
        double[] temp = new double[num_of_honors];
        num_of_honors=0;
        for(int i=0; i<graduate_grades.length;i++){
            System.out.println("graduate grades mean: "+Calc_GPA(graduate_grades[i]));
            if(Calc_GPA(graduate_grades[i])>=8.00){
                System.out.println("honor means: "+Calc_GPA(graduate_grades[i]));
                temp[num_of_honors]=i;
                num_of_honors++;
            }
        }
        int[] honored_students_id = Array_Double_To_Int(Arrays.copyOf(temp, num_of_honors));
        System.out.println(Arrays.toString(honored_students_id));
        return honored_students_id;
    }
    /** finding similarities between courses 
     * @param 
     * @return integer array
    */



  /** used in other method
     * @param courseA first course
     * @param courseB second course
     * @param students_grades: a 2D-array containing studentID and grades
     * @return double from 0-10 to indicate similarity
     */ 
    public static double Course_Similarity(double[][] studentGradesArray, int courseA, int courseB){

        double differenceSum = 0;
        int numOfStudents = 0;
        for(double[] student: studentGradesArray){
            if(student!=null&&student[courseA]!=-1&&student[courseB]!=-1){
                numOfStudents++;
                differenceSum += Math.abs(student[courseA] - student[courseB]);
            }
        }
        if(numOfStudents==0){return -1;}
        return 10 - round(differenceSum/numOfStudents, 2);
    }

    /** finding similarities between courses
     * @param students_grades: a 2D-array containing studentID and grades
     * @param numOfCourses number of courses in the array
     * @return 2D array with values of type double that indicate similarity
    */
    public static double[][] Similarity_Array(double[][] studentGradesArray, int numOfCourses){
        double[][] array = new double[numOfCourses][numOfCourses];
        for(int A=0; A<numOfCourses; A++){
            for(int B=A; B<numOfCourses; B++){
                double similarity = round(Course_Similarity(studentGradesArray, A, B),2);
                array[A][B] = similarity;
                array[B][A]  =similarity;
            }
        }
        
        return array;
    }
    public static double[][] Comparing_Courses( double[][] similarity_array,double[][] studentGradesArray, int numOfCourses){
        double[][] array = new double[0][];
        // Similarity divides
        for(double[] row:similarity_array){
           // to finish
            
        }
      
        
        return array;
    }
     /*
     * 
     * STEP 2
     *  
     * 
     */

     
    public static boolean[][] Missing_Grades_Table(double[][] studentGradesArray){
        boolean[][] studentGradesPresent = new boolean[0][];
        int groups  = 0;

        for(double[] student : studentGradesArray){
            if(student == null){continue;}
            //convert students grades into array which marks courses as graded 
            boolean[] hasGrade = new boolean[student.length]; //stores if student has grade for course or not
            for(int course=0; course<student.length; course++){
                if(student[course]!=-1){
                    hasGrade[course] = true;
                }
            }

            //checks if hasGrade isnt already in studentGradesPresent
            boolean same = false;
            for(boolean[] group : studentGradesPresent){ 
                if(Arrays.equals(group, hasGrade)){
                    same = true;
                }
            }
            if(!same){
                groups++;
                studentGradesPresent = Arrays.copyOf(studentGradesPresent, groups);
                studentGradesPresent[groups-1] = hasGrade;
            }
        }    
        return studentGradesPresent;       
    }

    public static int[] Index_Sort(int[] array){
        double[] temp = new double[array.length];

        for(int index=0; index<array.length; index++){
            temp[index] = array[index] + index/100.0; 
        }
        
        Arrays.sort(temp);

        int[] printOrder = new int[temp.length];
        for (int i=0; i<temp.length; i++) {
            double d = temp[i];
            int p = (int) Math.round((d - (int) d) *100);
            printOrder[i] = p;
        }
        return printOrder;
    }

    //counts the students that have a grade for a course and returns the courses sorted
    public static int[] Students_Per_Course(double[][] studentGradesArray){
        int len = studentGradesArray.length;
        int number_of_courses = studentGradesArray[len-1].length;
        int[] student_per_course = new int[number_of_courses];

        for(int course=0; course<number_of_courses; course++){
            for (double[] student : studentGradesArray) {
                if(student!=null && student[course]!=-1){
                    student_per_course[course]++;
                }
            }
        }
        return Index_Sort(student_per_course);

        //return array_Sort_By_Column(Array_To_2Darray(student_per_course), 0);
    }

    public static void Print_Missing_Grades_Sorted(boolean[][] missing_grade_table, String[] courseArray){

        //stores the amount of grades there are per course
        int[] num_of_grades = new int[missing_grade_table[0].length]; 
        for(int course=0; course<missing_grade_table[0].length; course++){
            for (int group=0; group<missing_grade_table.length; group++) {
                if(missing_grade_table[group][course]==true){
                    num_of_grades[course]++;
                }
            }
        }
        
        //sorts courses based on the amount of grades
        int[] printOrder = Index_Sort(num_of_grades);
        
        System.out.println("\n\nGroups of students classified based on what courses are graded:\n");
        for(int course : printOrder){
            System.out.print(courseArray[course]+ " | ");
            for (boolean[] group : missing_grade_table) {
                if(group[course]){
                    System.out.print(" # ");
                } else {
                    System.out.print(" - ");
                }
                
            }
            System.out.println();
        }
        System.out.println();
    }


    /*
     * 
     *  SIMPLE OFTEN USED METHODS
     * 
     */

    /** reuseable simple array prase int->double double->int
     * @param double_array/int_array: arrays of int or double type
     * @return prased array
    **/
    public static int[] Array_Double_To_Int(double[] double_array){
        int[] int_array = new int[double_array.length];
        for(int i=0;i<double_array.length;i++){
            int_array [i] = (int)double_array[i];
        }
        return int_array;
    }
    public static double[] Array_Int_To_Double(int[] int_array){
        double[] double_array = new double[int_array.length];
        for(int i=0;i<int_array.length;i++){
            double_array [i] = (double)int_array[i];
        }
        return double_array;
    }
     /** Simple rounding function to specified decimal place
     *  @param k: double to be rounded
     *  @param decimalPlace: specifies the decimal place for rounding
     *  @return double rounded number
    **/
    public static double round(double k, int decimalPlace){
        return Math.round(k*Math.pow(10,decimalPlace) )/Math.pow(10,decimalPlace);
    }
}

